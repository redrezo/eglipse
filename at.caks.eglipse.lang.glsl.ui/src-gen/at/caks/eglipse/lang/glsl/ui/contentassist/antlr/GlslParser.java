/*
* generated by Xtext
*/
package at.caks.eglipse.lang.glsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.caks.eglipse.lang.glsl.services.GlslGrammarAccess;

public class GlslParser extends AbstractContentAssistParser {
	
	@Inject
	private GlslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.caks.eglipse.lang.glsl.ui.contentassist.antlr.internal.InternalGlslParser createParser() {
		at.caks.eglipse.lang.glsl.ui.contentassist.antlr.internal.InternalGlslParser result = new at.caks.eglipse.lang.glsl.ui.contentassist.antlr.internal.InternalGlslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSourceFileAccess().getAlternatives_1(), "rule__SourceFile__Alternatives_1");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getGlobalDeclarationAccess().getAlternatives(), "rule__GlobalDeclaration__Alternatives");
					put(grammarAccess.getAttributeDeclarationAccess().getAlternatives(), "rule__AttributeDeclaration__Alternatives");
					put(grammarAccess.getFunctionPrototypeAccess().getAlternatives_3(), "rule__FunctionPrototype__Alternatives_3");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getScalarTypeAccess().getAlternatives(), "rule__ScalarType__Alternatives");
					put(grammarAccess.getComplexTypeAccess().getAlternatives(), "rule__ComplexType__Alternatives");
					put(grammarAccess.getVecTypeAccess().getAlternatives(), "rule__VecType__Alternatives");
					put(grammarAccess.getMatTypeAccess().getAlternatives(), "rule__MatType__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getStatementAccess().getAAlternatives_8_3_0(), "rule__Statement__AAlternatives_8_3_0");
					put(grammarAccess.getSwitchCaseAccess().getAlternatives(), "rule__SwitchCase__Alternatives");
					put(grammarAccess.getSwitchCaseAccess().getAlternatives_0_1(), "rule__SwitchCase__Alternatives_0_1");
					put(grammarAccess.getJumpStatementAccess().getAlternatives(), "rule__JumpStatement__Alternatives");
					put(grammarAccess.getAddOpAccess().getAlternatives(), "rule__AddOp__Alternatives");
					put(grammarAccess.getMulOpAccess().getAlternatives(), "rule__MulOp__Alternatives");
					put(grammarAccess.getPostfixExpAccess().getAlternatives(), "rule__PostfixExp__Alternatives");
					put(grammarAccess.getPostfixExpAccess().getAlternatives_0_2(), "rule__PostfixExp__Alternatives_0_2");
					put(grammarAccess.getPostfixExpAccess().getMemberAlternatives_0_2_1_2_0(), "rule__PostfixExp__MemberAlternatives_0_2_1_2_0");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAbstractDefinitionAccess().getAlternatives(), "rule__AbstractDefinition__Alternatives");
					put(grammarAccess.getLogicOpAccess().getAlternatives(), "rule__LogicOp__Alternatives");
					put(grammarAccess.getSourceFileAccess().getGroup(), "rule__SourceFile__Group__0");
					put(grammarAccess.getSourceFileAccess().getGroup_1_0(), "rule__SourceFile__Group_1_0__0");
					put(grammarAccess.getSourceFileAccess().getGroup_1_1(), "rule__SourceFile__Group_1_1__0");
					put(grammarAccess.getSourceFileAccess().getGroup_1_2(), "rule__SourceFile__Group_1_2__0");
					put(grammarAccess.getSourceFileAccess().getGroup_1_4(), "rule__SourceFile__Group_1_4__0");
					put(grammarAccess.getPrecompilerVersionAccess().getGroup(), "rule__PrecompilerVersion__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_0(), "rule__Declaration__Group_0__0");
					put(grammarAccess.getDeclarationAccess().getGroup_1(), "rule__Declaration__Group_1__0");
					put(grammarAccess.getDeclarationAccess().getGroup_2(), "rule__Declaration__Group_2__0");
					put(grammarAccess.getGlobalDeclarationAccess().getGroup_0(), "rule__GlobalDeclaration__Group_0__0");
					put(grammarAccess.getGlobalDeclarationAccess().getGroup_1(), "rule__GlobalDeclaration__Group_1__0");
					put(grammarAccess.getGlobalDeclarationAccess().getGroup_2(), "rule__GlobalDeclaration__Group_2__0");
					put(grammarAccess.getUniformDeclarationAccess().getGroup(), "rule__UniformDeclaration__Group__0");
					put(grammarAccess.getAttributeDeclarationAccess().getGroup_0(), "rule__AttributeDeclaration__Group_0__0");
					put(grammarAccess.getAttributeDeclarationAccess().getGroup_1(), "rule__AttributeDeclaration__Group_1__0");
					put(grammarAccess.getAttributeDeclarationAccess().getGroup_2(), "rule__AttributeDeclaration__Group_2__0");
					put(grammarAccess.getFunctionPrototypeAccess().getGroup(), "rule__FunctionPrototype__Group__0");
					put(grammarAccess.getFunctionPrototypeAccess().getGroup_3_1(), "rule__FunctionPrototype__Group_3_1__0");
					put(grammarAccess.getFunctionPrototypeAccess().getGroup_3_1_1(), "rule__FunctionPrototype__Group_3_1_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
					put(grammarAccess.getScalarTypeAccess().getGroup_0(), "rule__ScalarType__Group_0__0");
					put(grammarAccess.getScalarTypeAccess().getGroup_1(), "rule__ScalarType__Group_1__0");
					put(grammarAccess.getScalarTypeAccess().getGroup_2(), "rule__ScalarType__Group_2__0");
					put(grammarAccess.getScalarTypeAccess().getGroup_3(), "rule__ScalarType__Group_3__0");
					put(grammarAccess.getVecTypeAccess().getGroup_0(), "rule__VecType__Group_0__0");
					put(grammarAccess.getVecTypeAccess().getGroup_1(), "rule__VecType__Group_1__0");
					put(grammarAccess.getVecTypeAccess().getGroup_2(), "rule__VecType__Group_2__0");
					put(grammarAccess.getVecTypeAccess().getGroup_3(), "rule__VecType__Group_3__0");
					put(grammarAccess.getVecTypeAccess().getGroup_4(), "rule__VecType__Group_4__0");
					put(grammarAccess.getVecTypeAccess().getGroup_5(), "rule__VecType__Group_5__0");
					put(grammarAccess.getVecTypeAccess().getGroup_6(), "rule__VecType__Group_6__0");
					put(grammarAccess.getVecTypeAccess().getGroup_7(), "rule__VecType__Group_7__0");
					put(grammarAccess.getVecTypeAccess().getGroup_8(), "rule__VecType__Group_8__0");
					put(grammarAccess.getVecTypeAccess().getGroup_9(), "rule__VecType__Group_9__0");
					put(grammarAccess.getVecTypeAccess().getGroup_10(), "rule__VecType__Group_10__0");
					put(grammarAccess.getVecTypeAccess().getGroup_11(), "rule__VecType__Group_11__0");
					put(grammarAccess.getMatTypeAccess().getGroup_0(), "rule__MatType__Group_0__0");
					put(grammarAccess.getMatTypeAccess().getGroup_1(), "rule__MatType__Group_1__0");
					put(grammarAccess.getMatTypeAccess().getGroup_2(), "rule__MatType__Group_2__0");
					put(grammarAccess.getMatTypeAccess().getGroup_3(), "rule__MatType__Group_3__0");
					put(grammarAccess.getMatTypeAccess().getGroup_4(), "rule__MatType__Group_4__0");
					put(grammarAccess.getMatTypeAccess().getGroup_5(), "rule__MatType__Group_5__0");
					put(grammarAccess.getMatTypeAccess().getGroup_6(), "rule__MatType__Group_6__0");
					put(grammarAccess.getMatTypeAccess().getGroup_7(), "rule__MatType__Group_7__0");
					put(grammarAccess.getMatTypeAccess().getGroup_8(), "rule__MatType__Group_8__0");
					put(grammarAccess.getMatTypeAccess().getGroup_9(), "rule__MatType__Group_9__0");
					put(grammarAccess.getMatTypeAccess().getGroup_10(), "rule__MatType__Group_10__0");
					put(grammarAccess.getMatTypeAccess().getGroup_11(), "rule__MatType__Group_11__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup(), "rule__FunctionDefinition__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_3_1(), "rule__FunctionCall__Group_3_1__0");
					put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
					put(grammarAccess.getStatementAccess().getGroup_4_2(), "rule__Statement__Group_4_2__0");
					put(grammarAccess.getStatementAccess().getGroup_4_2_2(), "rule__Statement__Group_4_2_2__0");
					put(grammarAccess.getStatementAccess().getGroup_5(), "rule__Statement__Group_5__0");
					put(grammarAccess.getStatementAccess().getGroup_5_6(), "rule__Statement__Group_5_6__0");
					put(grammarAccess.getStatementAccess().getGroup_6(), "rule__Statement__Group_6__0");
					put(grammarAccess.getStatementAccess().getGroup_7(), "rule__Statement__Group_7__0");
					put(grammarAccess.getStatementAccess().getGroup_8(), "rule__Statement__Group_8__0");
					put(grammarAccess.getStatementAccess().getGroup_9(), "rule__Statement__Group_9__0");
					put(grammarAccess.getSwitchCaseAccess().getGroup_0(), "rule__SwitchCase__Group_0__0");
					put(grammarAccess.getSwitchCaseAccess().getGroup_1(), "rule__SwitchCase__Group_1__0");
					put(grammarAccess.getBlockStatementAccess().getGroup(), "rule__BlockStatement__Group__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_0(), "rule__JumpStatement__Group_0__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_1(), "rule__JumpStatement__Group_1__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_2(), "rule__JumpStatement__Group_2__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_3(), "rule__JumpStatement__Group_3__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_4(), "rule__JumpStatement__Group_4__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup_2(), "rule__VariableDeclaration__Group_2__0");
					put(grammarAccess.getAssignmentStatementAccess().getGroup(), "rule__AssignmentStatement__Group__0");
					put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
					put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
					put(grammarAccess.getLogicExpAccess().getGroup(), "rule__LogicExp__Group__0");
					put(grammarAccess.getLogicExpAccess().getGroup_1(), "rule__LogicExp__Group_1__0");
					put(grammarAccess.getAddExpAccess().getGroup(), "rule__AddExp__Group__0");
					put(grammarAccess.getAddExpAccess().getGroup_1(), "rule__AddExp__Group_1__0");
					put(grammarAccess.getMulExpAccess().getGroup(), "rule__MulExp__Group__0");
					put(grammarAccess.getMulExpAccess().getGroup_1(), "rule__MulExp__Group_1__0");
					put(grammarAccess.getPostfixExpAccess().getGroup_0(), "rule__PostfixExp__Group_0__0");
					put(grammarAccess.getPostfixExpAccess().getGroup_0_2_0(), "rule__PostfixExp__Group_0_2_0__0");
					put(grammarAccess.getPostfixExpAccess().getGroup_0_2_0_3(), "rule__PostfixExp__Group_0_2_0_3__0");
					put(grammarAccess.getPostfixExpAccess().getGroup_0_2_1(), "rule__PostfixExp__Group_0_2_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_0_3(), "rule__Atomic__Group_0_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_0_3_1(), "rule__Atomic__Group_0_3_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getAtomicAccess().getGroup_4(), "rule__Atomic__Group_4__0");
					put(grammarAccess.getAtomicAccess().getGroup_5(), "rule__Atomic__Group_5__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1(), "rule__Definition__Group_1__0");
					put(grammarAccess.getDefinitionAccess().getGroup_1_2(), "rule__Definition__Group_1_2__0");
					put(grammarAccess.getEvaluationAccess().getGroup(), "rule__Evaluation__Group__0");
					put(grammarAccess.getSourceFileAccess().getPreAssignment_0(), "rule__SourceFile__PreAssignment_0");
					put(grammarAccess.getSourceFileAccess().getUniformsAssignment_1_0_0(), "rule__SourceFile__UniformsAssignment_1_0_0");
					put(grammarAccess.getSourceFileAccess().getAttribsAssignment_1_1_0(), "rule__SourceFile__AttribsAssignment_1_1_0");
					put(grammarAccess.getSourceFileAccess().getPrototypesAssignment_1_2_0(), "rule__SourceFile__PrototypesAssignment_1_2_0");
					put(grammarAccess.getSourceFileAccess().getFunctionsAssignment_1_3(), "rule__SourceFile__FunctionsAssignment_1_3");
					put(grammarAccess.getSourceFileAccess().getVariablesAssignment_1_4_0(), "rule__SourceFile__VariablesAssignment_1_4_0");
					put(grammarAccess.getPrecompilerVersionAccess().getVersionAssignment_1(), "rule__PrecompilerVersion__VersionAssignment_1");
					put(grammarAccess.getPrecompilerVersionAccess().getProfileAssignment_2(), "rule__PrecompilerVersion__ProfileAssignment_2");
					put(grammarAccess.getUniformDeclarationAccess().getQualifierAssignment_1(), "rule__UniformDeclaration__QualifierAssignment_1");
					put(grammarAccess.getUniformDeclarationAccess().getTypeAssignment_2(), "rule__UniformDeclaration__TypeAssignment_2");
					put(grammarAccess.getUniformDeclarationAccess().getNameAssignment_3(), "rule__UniformDeclaration__NameAssignment_3");
					put(grammarAccess.getAttributeDeclarationAccess().getQualifierAssignment_0_1(), "rule__AttributeDeclaration__QualifierAssignment_0_1");
					put(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_0_2(), "rule__AttributeDeclaration__TypeAssignment_0_2");
					put(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_0_3(), "rule__AttributeDeclaration__NameAssignment_0_3");
					put(grammarAccess.getAttributeDeclarationAccess().getQualifierAssignment_1_1(), "rule__AttributeDeclaration__QualifierAssignment_1_1");
					put(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_1_2(), "rule__AttributeDeclaration__TypeAssignment_1_2");
					put(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_1_3(), "rule__AttributeDeclaration__NameAssignment_1_3");
					put(grammarAccess.getAttributeDeclarationAccess().getQualifierAssignment_2_1(), "rule__AttributeDeclaration__QualifierAssignment_2_1");
					put(grammarAccess.getAttributeDeclarationAccess().getTypeAssignment_2_2(), "rule__AttributeDeclaration__TypeAssignment_2_2");
					put(grammarAccess.getAttributeDeclarationAccess().getNameAssignment_2_3(), "rule__AttributeDeclaration__NameAssignment_2_3");
					put(grammarAccess.getFunctionPrototypeAccess().getTypeAssignment_0(), "rule__FunctionPrototype__TypeAssignment_0");
					put(grammarAccess.getFunctionPrototypeAccess().getNameAssignment_1(), "rule__FunctionPrototype__NameAssignment_1");
					put(grammarAccess.getFunctionPrototypeAccess().getParamsAssignment_3_1_0(), "rule__FunctionPrototype__ParamsAssignment_3_1_0");
					put(grammarAccess.getFunctionPrototypeAccess().getParamsAssignment_3_1_1_1(), "rule__FunctionPrototype__ParamsAssignment_3_1_1_1");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_2_1(), "rule__Type__NameAssignment_2_1");
					put(grammarAccess.getScalarTypeAccess().getNameAssignment_0_1(), "rule__ScalarType__NameAssignment_0_1");
					put(grammarAccess.getScalarTypeAccess().getNameAssignment_1_1(), "rule__ScalarType__NameAssignment_1_1");
					put(grammarAccess.getScalarTypeAccess().getNameAssignment_2_1(), "rule__ScalarType__NameAssignment_2_1");
					put(grammarAccess.getScalarTypeAccess().getNameAssignment_3_1(), "rule__ScalarType__NameAssignment_3_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_0_1(), "rule__VecType__NameAssignment_0_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_1_1(), "rule__VecType__NameAssignment_1_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_2_1(), "rule__VecType__NameAssignment_2_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_3_1(), "rule__VecType__NameAssignment_3_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_4_1(), "rule__VecType__NameAssignment_4_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_5_1(), "rule__VecType__NameAssignment_5_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_6_1(), "rule__VecType__NameAssignment_6_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_7_1(), "rule__VecType__NameAssignment_7_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_8_1(), "rule__VecType__NameAssignment_8_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_9_1(), "rule__VecType__NameAssignment_9_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_10_1(), "rule__VecType__NameAssignment_10_1");
					put(grammarAccess.getVecTypeAccess().getNameAssignment_11_1(), "rule__VecType__NameAssignment_11_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_0_1(), "rule__MatType__NameAssignment_0_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_1_1(), "rule__MatType__NameAssignment_1_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_2_1(), "rule__MatType__NameAssignment_2_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_3_1(), "rule__MatType__NameAssignment_3_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_4_1(), "rule__MatType__NameAssignment_4_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_5_1(), "rule__MatType__NameAssignment_5_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_6_1(), "rule__MatType__NameAssignment_6_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_7_1(), "rule__MatType__NameAssignment_7_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_8_1(), "rule__MatType__NameAssignment_8_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_9_1(), "rule__MatType__NameAssignment_9_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_10_1(), "rule__MatType__NameAssignment_10_1");
					put(grammarAccess.getMatTypeAccess().getNameAssignment_11_1(), "rule__MatType__NameAssignment_11_1");
					put(grammarAccess.getFunctionDefinitionAccess().getStatementsAssignment_2(), "rule__FunctionDefinition__StatementsAssignment_2");
					put(grammarAccess.getFunctionCallAccess().getNameAssignment_0(), "rule__FunctionCall__NameAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getFuncAssignment_1(), "rule__FunctionCall__FuncAssignment_1");
					put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0(), "rule__FunctionCall__ArgsAssignment_3_0");
					put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1(), "rule__FunctionCall__ArgsAssignment_3_1_1");
					put(grammarAccess.getStatementAccess().getSymbolAssignment_4_1(), "rule__Statement__SymbolAssignment_4_1");
					put(grammarAccess.getStatementAccess().getActualsAssignment_4_2_1(), "rule__Statement__ActualsAssignment_4_2_1");
					put(grammarAccess.getStatementAccess().getActualsAssignment_4_2_2_1(), "rule__Statement__ActualsAssignment_4_2_2_1");
					put(grammarAccess.getStatementAccess().getConditionAssignment_5_3(), "rule__Statement__ConditionAssignment_5_3");
					put(grammarAccess.getStatementAccess().getThenAssignment_5_5(), "rule__Statement__ThenAssignment_5_5");
					put(grammarAccess.getStatementAccess().getElseAssignment_5_6_1(), "rule__Statement__ElseAssignment_5_6_1");
					put(grammarAccess.getStatementAccess().getConditionAssignment_6_3(), "rule__Statement__ConditionAssignment_6_3");
					put(grammarAccess.getStatementAccess().getDoAssignment_6_5(), "rule__Statement__DoAssignment_6_5");
					put(grammarAccess.getStatementAccess().getDoAssignment_7_2(), "rule__Statement__DoAssignment_7_2");
					put(grammarAccess.getStatementAccess().getConditionAssignment_7_5(), "rule__Statement__ConditionAssignment_7_5");
					put(grammarAccess.getStatementAccess().getAAssignment_8_3(), "rule__Statement__AAssignment_8_3");
					put(grammarAccess.getStatementAccess().getBAssignment_8_5(), "rule__Statement__BAssignment_8_5");
					put(grammarAccess.getStatementAccess().getCAssignment_8_7(), "rule__Statement__CAssignment_8_7");
					put(grammarAccess.getStatementAccess().getDoAssignment_8_9(), "rule__Statement__DoAssignment_8_9");
					put(grammarAccess.getStatementAccess().getAAssignment_9_3(), "rule__Statement__AAssignment_9_3");
					put(grammarAccess.getStatementAccess().getCasesAssignment_9_6(), "rule__Statement__CasesAssignment_9_6");
					put(grammarAccess.getSwitchCaseAccess().getCaseAssignment_0_1_0(), "rule__SwitchCase__CaseAssignment_0_1_0");
					put(grammarAccess.getSwitchCaseAccess().getCaseAssignment_0_1_1(), "rule__SwitchCase__CaseAssignment_0_1_1");
					put(grammarAccess.getSwitchCaseAccess().getFcaseAssignment_0_1_2(), "rule__SwitchCase__FcaseAssignment_0_1_2");
					put(grammarAccess.getSwitchCaseAccess().getThenAssignment_0_3(), "rule__SwitchCase__ThenAssignment_0_3");
					put(grammarAccess.getSwitchCaseAccess().getThenAssignment_1_2(), "rule__SwitchCase__ThenAssignment_1_2");
					put(grammarAccess.getBlockStatementAccess().getStatementsAssignment_1(), "rule__BlockStatement__StatementsAssignment_1");
					put(grammarAccess.getJumpStatementAccess().getValueAssignment_3_2(), "rule__JumpStatement__ValueAssignment_3_2");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_0(), "rule__VariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getInitAssignment_2_1(), "rule__VariableDeclaration__InitAssignment_2_1");
					put(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0(), "rule__AssignmentStatement__VariableAssignment_0");
					put(grammarAccess.getAssignmentStatementAccess().getRightAssignment_2(), "rule__AssignmentStatement__RightAssignment_2");
					put(grammarAccess.getExpAccess().getThenAssignment_1_2(), "rule__Exp__ThenAssignment_1_2");
					put(grammarAccess.getExpAccess().getElseAssignment_1_4(), "rule__Exp__ElseAssignment_1_4");
					put(grammarAccess.getLogicExpAccess().getOpAssignment_1_1(), "rule__LogicExp__OpAssignment_1_1");
					put(grammarAccess.getLogicExpAccess().getRightAssignment_1_2(), "rule__LogicExp__RightAssignment_1_2");
					put(grammarAccess.getAddExpAccess().getOpAssignment_1_1(), "rule__AddExp__OpAssignment_1_1");
					put(grammarAccess.getAddExpAccess().getRightAssignment_1_2(), "rule__AddExp__RightAssignment_1_2");
					put(grammarAccess.getMulExpAccess().getOpAssignment_1_1(), "rule__MulExp__OpAssignment_1_1");
					put(grammarAccess.getMulExpAccess().getRightAssignment_1_2(), "rule__MulExp__RightAssignment_1_2");
					put(grammarAccess.getPostfixExpAccess().getSymbolAssignment_0_1(), "rule__PostfixExp__SymbolAssignment_0_1");
					put(grammarAccess.getPostfixExpAccess().getActualsAssignment_0_2_0_2(), "rule__PostfixExp__ActualsAssignment_0_2_0_2");
					put(grammarAccess.getPostfixExpAccess().getActualsAssignment_0_2_0_3_1(), "rule__PostfixExp__ActualsAssignment_0_2_0_3_1");
					put(grammarAccess.getPostfixExpAccess().getMemberAssignment_0_2_1_2(), "rule__PostfixExp__MemberAssignment_0_2_1_2");
					put(grammarAccess.getAtomicAccess().getTypeAssignment_0_1(), "rule__Atomic__TypeAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_0_3_0(), "rule__Atomic__ParamsAssignment_0_3_0");
					put(grammarAccess.getAtomicAccess().getParamsAssignment_0_3_1_1(), "rule__Atomic__ParamsAssignment_0_3_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_3_1(), "rule__Atomic__ValueAssignment_3_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_4_1(), "rule__Atomic__ValueAssignment_4_1");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_0(), "rule__Definition__NameAssignment_0");
					put(grammarAccess.getDefinitionAccess().getArgsAssignment_1_1(), "rule__Definition__ArgsAssignment_1_1");
					put(grammarAccess.getDefinitionAccess().getArgsAssignment_1_2_1(), "rule__Definition__ArgsAssignment_1_2_1");
					put(grammarAccess.getDeclaredParameterAccess().getNameAssignment(), "rule__DeclaredParameter__NameAssignment");
					put(grammarAccess.getEvaluationAccess().getExpressionAssignment_0(), "rule__Evaluation__ExpressionAssignment_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.caks.eglipse.lang.glsl.ui.contentassist.antlr.internal.InternalGlslParser typedParser = (at.caks.eglipse.lang.glsl.ui.contentassist.antlr.internal.InternalGlslParser) parser;
			typedParser.entryRuleSourceFile();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_NL", "RULE_PRECOMPILER_STATEMENT" };
	}
	
	public GlslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GlslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
