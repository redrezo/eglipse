/*
* generated by Xtext
*/
package org.eglipse.lang.glsl.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.xtext.ui.editor.utils.TextStyle;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.ui.label.StylerFactory;
import org.eglipse.lang.glsl.glsl.Constructor;
import org.eglipse.lang.glsl.glsl.FunctionPrototype;
import org.eglipse.lang.glsl.glsl.InAttributeDeclaration;
import org.eglipse.lang.glsl.glsl.InOutAttributeDeclaration;
import org.eglipse.lang.glsl.glsl.OutAttributeDeclaration;
import org.eglipse.lang.glsl.glsl.Parameter;
import org.eglipse.lang.glsl.glsl.Symbol;
import org.eglipse.lang.glsl.glsl.Type;
import org.eglipse.lang.glsl.glsl.UniformDeclaration;
import org.eglipse.lang.glsl.glsl.VariableDeclaration;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class GlslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public GlslLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	String text(Constructor ele) {
		return "Constructor of " + ele.getType().getName();
	}
	
	
	Object text(FunctionPrototype ele) {
		StyledString s = new StyledString();
		int begin = 0;
		String add = ele.getType().getName();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = ele.getName();
		s.append(add);
		s.append(" (");
		begin += add.length() + 2;
		for (Parameter p : ele.getParams()) {
			add = p.getType().getName();
			s.append(add);
			s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
			begin += add.length();
			if (ele.getParams().indexOf(p) != ele.getParams().size() - 1) {
				s.append(", ");
				begin += 2;
			}
		}
		s.append(")");
		//s.setStyle(s.length(), add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		return s;
	}
	
	String image(Type type) {
		return "type.png";
	}
	
	String image(Symbol s) {
		return "function.png";
	}
	
	String image(VariableDeclaration var) {
		return "variable.png";
	}
	
	String image(UniformDeclaration u) {
		return "uniform.png";
	}
	
	String image(InOutAttributeDeclaration u) {
		return "attribute.png";
	}
	
	
	String image(OutAttributeDeclaration u) {
		return "attribute.png";
	}
	
//	String text(InAttributeDeclaration d) {
//		return d.getQualifier() + " " + d.getType().getName() + " " + d.getName();
//	}
	
	@Inject
	private StylerFactory stylerFactory;

	
	Object text(InAttributeDeclaration d) {
		StyledString s = new StyledString();
		int begin = 0;
		String add = d.getQualifier();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getType().getName();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getName();
		s.append(add);
		//s.setStyle(s.length(), add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		return s;
	}
	
	Object text(OutAttributeDeclaration d) {
		StyledString s = new StyledString();
		int begin = 0;
		String add = d.getQualifier();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getType().getName();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getName();
		s.append(add);
		//s.setStyle(s.length(), add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		return s;
	}
	
	Object text(InOutAttributeDeclaration d) {
		StyledString s = new StyledString();
		int begin = 0;
		String add = d.getQualifier();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getType().getName();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getName();
		s.append(add);
		//s.setStyle(s.length(), add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		return s;
	}
	
	protected TextStyle getQualifierTextStyle() {
		TextStyle textStyle = new TextStyle();
		textStyle.setColor(new RGB(50, 177, 71));
		return textStyle;
	}
	
	protected TextStyle getTypeTextStyle() {
		TextStyle textStyle = new TextStyle();
		textStyle.setColor(new RGB(127, 0, 85));
//		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}

	
	
	String image(InAttributeDeclaration u) {
		return "attribute.png";
	}
	
	Object text(VariableDeclaration d) {
		StyledString s = new StyledString();
		int begin = 0;
		String add = d.getType().getName();
		s.append(add);
		s.setStyle(begin, add.length(), stylerFactory.createXtextStyleAdapterStyler(getTypeTextStyle()));
		s.append(" ");
		begin += add.length() + 1;
		add = d.getName();
		s.append(add);
		//s.setStyle(s.length(), add.length(), stylerFactory.createXtextStyleAdapterStyler(getQualifierTextStyle()));
		return s;
	}
}
