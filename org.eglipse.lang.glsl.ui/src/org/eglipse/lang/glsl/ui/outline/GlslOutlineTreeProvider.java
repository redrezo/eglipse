/*
* generated by Xtext
*/
package org.eglipse.lang.glsl.ui.outline;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.viewers.StyledString;
import org.eclipse.swt.SWT;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.AbstractOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.utils.TextStyle;
import org.eclipse.xtext.ui.label.StylerFactory;
import org.eglipse.lang.glsl.glsl.AddExp;
import org.eglipse.lang.glsl.glsl.Constructor;
import org.eglipse.lang.glsl.glsl.Exp;
import org.eglipse.lang.glsl.glsl.FunctionDefinition;
import org.eglipse.lang.glsl.glsl.FunctionPrototype;
import org.eglipse.lang.glsl.glsl.SourceFile;
import org.eglipse.lang.glsl.glsl.Symbol;
import org.eglipse.lang.glsl.glsl.VariableDeclaration;

import com.google.inject.Inject;

/**
 * customization of the default outline structure
 * 
 */
public class GlslOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject
	private StylerFactory stylerFactory;
	
	protected TextStyle getCaptionTextStyle() {
		TextStyle textStyle = new TextStyle();
		textStyle.setStyle(SWT.BOLD);
		return textStyle;
	}
	
	private StyledString createCaption(String text) {
		return new StyledString(text, stylerFactory.createXtextStyleAdapterStyler(getCaptionTextStyle()));
	}
	
	protected void _createChildren(DocumentRootNode parentNode,
			SourceFile domainModel) {
		
		IOutlineNode version = new AbstractOutlineNode(parentNode, null, "#version TODO", true) {
		};
		
		IOutlineNode uniforms = new AbstractOutlineNode(parentNode, null, createCaption("Uniforms"), true) {
		};
		for (Symbol s : domainModel.getUniforms()) {
			createNode(parentNode, s);
		}
		
		IOutlineNode attributes = new AbstractOutlineNode(parentNode, null, createCaption("Attributes"), true) {
		};
		for (Symbol s : domainModel.getAttribs()) {
			createNode(parentNode, s);
		}
		
		IOutlineNode declarations = new AbstractOutlineNode(parentNode, null, createCaption("Declarations"), true) {
		};
		for (VariableDeclaration d : domainModel.getVariables()) {
			createNode(parentNode, d);
		}
		
		IOutlineNode prototypes = new AbstractOutlineNode(parentNode, null, createCaption("Prototypes"), true) {
		};
		for (FunctionPrototype t: domainModel.getPrototypes()) {
			createNode(parentNode, t);
		}
		
		IOutlineNode functions = new AbstractOutlineNode(parentNode, null, createCaption("Functions"), true) {
		};
		for (FunctionDefinition def : domainModel.getFunctions()) {
			createNode(parentNode, def);
		}
		
	}
	
	public List<EObject> getChildren(Symbol s) {
		return Collections.emptyList();
	}
	
	public List<EObject> getChildren(Exp s) {
		return Collections.emptyList();
	}
	
	public List<EObject> getChildren(AddExp exp) {
		List<EObject> res = new ArrayList<EObject>();
		res.add(exp.getLeft());
		res.add(exp.getRight());
		return res;
	}

	public List<EObject> getChildren(Constructor constructor) {
		List<EObject> res = new ArrayList<EObject>();
		res.addAll(constructor.getParams());
		return res;
	}
}
