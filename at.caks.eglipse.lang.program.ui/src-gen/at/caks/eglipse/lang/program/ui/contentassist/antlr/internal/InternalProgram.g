/*
* generated by Xtext
*/
grammar InternalProgram;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package at.caks.eglipse.lang.program.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package at.caks.eglipse.lang.program.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import at.caks.eglipse.lang.program.services.ProgramGrammarAccess;

}

@parser::members {
 
 	private ProgramGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ProgramGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getShaderAssignment()); }
(rule__Program__ShaderAssignment)*
{ after(grammarAccess.getProgramAccess().getShaderAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShader
entryRuleShader 
:
{ before(grammarAccess.getShaderRule()); }
	 ruleShader
{ after(grammarAccess.getShaderRule()); } 
	 EOF 
;

// Rule Shader
ruleShader
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShaderAccess().getGroup()); }
(rule__Shader__Group__0)
{ after(grammarAccess.getShaderAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Shader__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Shader__Group__0__Impl
	rule__Shader__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shader__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShaderAccess().getShaderKeyword_0()); }

	'shader' 

{ after(grammarAccess.getShaderAccess().getShaderKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Shader__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Shader__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shader__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShaderAccess().getPathAssignment_1()); }
(rule__Shader__PathAssignment_1)
{ after(grammarAccess.getShaderAccess().getPathAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__ShaderAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getShaderShaderParserRuleCall_0()); }
	ruleShader{ after(grammarAccess.getProgramAccess().getShaderShaderParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Shader__PathAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShaderAccess().getPathPATHTerminalRuleCall_1_0()); }
	RULE_PATH{ after(grammarAccess.getShaderAccess().getPathPATHTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_PATH : RULE_STRING;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


