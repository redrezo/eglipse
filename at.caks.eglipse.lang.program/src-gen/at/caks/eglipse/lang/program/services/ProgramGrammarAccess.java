/*
* generated by Xtext
*/

package at.caks.eglipse.lang.program.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProgramGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cShaderAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cShaderShaderParserRuleCall_0 = (RuleCall)cShaderAssignment.eContents().get(0);
		
		//Program:
		//	shader+=Shader*;
		public ParserRule getRule() { return rule; }

		//shader+=Shader*
		public Assignment getShaderAssignment() { return cShaderAssignment; }

		//Shader
		public RuleCall getShaderShaderParserRuleCall_0() { return cShaderShaderParserRuleCall_0; }
	}

	public class ShaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Shader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPATHTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Shader:
		//	"shader" path=PATH;
		public ParserRule getRule() { return rule; }

		//"shader" path=PATH
		public Group getGroup() { return cGroup; }

		//"shader"
		public Keyword getShaderKeyword_0() { return cShaderKeyword_0; }

		//path=PATH
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//PATH
		public RuleCall getPathPATHTerminalRuleCall_1_0() { return cPathPATHTerminalRuleCall_1_0; }
	}
	
	
	private ProgramElements pProgram;
	private TerminalRule tPATH;
	private ShaderElements pShader;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProgramGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	shader+=Shader*;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//terminal PATH:
	//	STRING;
	public TerminalRule getPATHRule() {
		return (tPATH != null) ? tPATH : (tPATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PATH"));
	} 

	//Shader:
	//	"shader" path=PATH;
	public ShaderElements getShaderAccess() {
		return (pShader != null) ? pShader : (pShader = new ShaderElements());
	}
	
	public ParserRule getShaderRule() {
		return getShaderAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
