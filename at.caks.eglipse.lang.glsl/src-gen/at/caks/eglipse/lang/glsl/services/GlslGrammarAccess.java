/*
* generated by Xtext
*/

package at.caks.eglipse.lang.glsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GlslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrePrecompilerStatementParserRuleCall_0_0 = (RuleCall)cPreAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cUniformsAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cUniformsUniformDeclarationParserRuleCall_1_0_0_0 = (RuleCall)cUniformsAssignment_1_0_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAttribsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAttribsAttributeDeclarationParserRuleCall_1_1_0_0 = (RuleCall)cAttribsAssignment_1_1_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cPrototypesAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cPrototypesFunctionPrototypeParserRuleCall_1_2_0_0 = (RuleCall)cPrototypesAssignment_1_2_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cFunctionsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_1_3_0 = (RuleCall)cFunctionsAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cVariablesAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_4_0_0 = (RuleCall)cVariablesAssignment_1_4_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		
		//SourceFile:
		//	pre+=PrecompilerStatement* (uniforms+=UniformDeclaration SEMICOLON | attribs+=AttributeDeclaration SEMICOLON |
		//	prototypes+=FunctionPrototype SEMICOLON | functions+=FunctionDefinition | variables+=VariableDeclaration SEMICOLON)*;
		public ParserRule getRule() { return rule; }

		//pre+=PrecompilerStatement* (uniforms+=UniformDeclaration SEMICOLON | attribs+=AttributeDeclaration SEMICOLON |
		//prototypes+=FunctionPrototype SEMICOLON | functions+=FunctionDefinition | variables+=VariableDeclaration SEMICOLON)*
		public Group getGroup() { return cGroup; }

		//pre+=PrecompilerStatement*
		public Assignment getPreAssignment_0() { return cPreAssignment_0; }

		//PrecompilerStatement
		public RuleCall getPrePrecompilerStatementParserRuleCall_0_0() { return cPrePrecompilerStatementParserRuleCall_0_0; }

		//(uniforms+=UniformDeclaration SEMICOLON | attribs+=AttributeDeclaration SEMICOLON | prototypes+=FunctionPrototype
		//SEMICOLON | functions+=FunctionDefinition | variables+=VariableDeclaration SEMICOLON)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//uniforms+=UniformDeclaration SEMICOLON
		public Group getGroup_1_0() { return cGroup_1_0; }

		//uniforms+=UniformDeclaration
		public Assignment getUniformsAssignment_1_0_0() { return cUniformsAssignment_1_0_0; }

		//UniformDeclaration
		public RuleCall getUniformsUniformDeclarationParserRuleCall_1_0_0_0() { return cUniformsUniformDeclarationParserRuleCall_1_0_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_0_1() { return cSEMICOLONTerminalRuleCall_1_0_1; }

		//attribs+=AttributeDeclaration SEMICOLON
		public Group getGroup_1_1() { return cGroup_1_1; }

		//attribs+=AttributeDeclaration
		public Assignment getAttribsAssignment_1_1_0() { return cAttribsAssignment_1_1_0; }

		//AttributeDeclaration
		public RuleCall getAttribsAttributeDeclarationParserRuleCall_1_1_0_0() { return cAttribsAttributeDeclarationParserRuleCall_1_1_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_1() { return cSEMICOLONTerminalRuleCall_1_1_1; }

		//prototypes+=FunctionPrototype SEMICOLON
		public Group getGroup_1_2() { return cGroup_1_2; }

		//prototypes+=FunctionPrototype
		public Assignment getPrototypesAssignment_1_2_0() { return cPrototypesAssignment_1_2_0; }

		//FunctionPrototype
		public RuleCall getPrototypesFunctionPrototypeParserRuleCall_1_2_0_0() { return cPrototypesFunctionPrototypeParserRuleCall_1_2_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_2_1() { return cSEMICOLONTerminalRuleCall_1_2_1; }

		//functions+=FunctionDefinition
		public Assignment getFunctionsAssignment_1_3() { return cFunctionsAssignment_1_3; }

		//FunctionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_1_3_0() { return cFunctionsFunctionDefinitionParserRuleCall_1_3_0; }

		//variables+=VariableDeclaration SEMICOLON
		public Group getGroup_1_4() { return cGroup_1_4; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1_4_0() { return cVariablesAssignment_1_4_0; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_4_0_0() { return cVariablesVariableDeclarationParserRuleCall_1_4_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_4_1() { return cSEMICOLONTerminalRuleCall_1_4_1; }
	}

	public class PrecompilerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrecompilerStatement");
		private final RuleCall cPrecompilerVersionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PrecompilerStatement:
		//	PrecompilerVersion;
		public ParserRule getRule() { return rule; }

		//PrecompilerVersion
		public RuleCall getPrecompilerVersionParserRuleCall() { return cPrecompilerVersionParserRuleCall; }
	}

	public class PrecompilerVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrecompilerVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVersionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionINTCONSTANTTerminalRuleCall_1_0 = (RuleCall)cVersionAssignment_1.eContents().get(0);
		private final Assignment cProfileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProfileIDENTIFIERTerminalRuleCall_2_0 = (RuleCall)cProfileAssignment_2.eContents().get(0);
		
		//PrecompilerVersion:
		//	"#version" version=INTCONSTANT profile=IDENTIFIER?;
		public ParserRule getRule() { return rule; }

		//"#version" version=INTCONSTANT profile=IDENTIFIER?
		public Group getGroup() { return cGroup; }

		//"#version"
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }

		//version=INTCONSTANT
		public Assignment getVersionAssignment_1() { return cVersionAssignment_1; }

		//INTCONSTANT
		public RuleCall getVersionINTCONSTANTTerminalRuleCall_1_0() { return cVersionINTCONSTANTTerminalRuleCall_1_0; }

		//profile=IDENTIFIER?
		public Assignment getProfileAssignment_2() { return cProfileAssignment_2; }

		//IDENTIFIER
		public RuleCall getProfileIDENTIFIERTerminalRuleCall_2_0() { return cProfileIDENTIFIERTerminalRuleCall_2_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUniformDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionPrototypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		////	GlobalDeclaration |
		////	LocalDeclaration
		//Declaration returns Symbol:
		//	UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
		//	FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
		//FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//UniformDeclaration SEMICOLON
		public Group getGroup_0() { return cGroup_0; }

		//UniformDeclaration
		public RuleCall getUniformDeclarationParserRuleCall_0_0() { return cUniformDeclarationParserRuleCall_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_1() { return cSEMICOLONTerminalRuleCall_0_1; }

		//AttributeDeclaration SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//AttributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_1_0() { return cAttributeDeclarationParserRuleCall_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1() { return cSEMICOLONTerminalRuleCall_1_1; }

		//FunctionPrototype SEMICOLON
		public Group getGroup_2() { return cGroup_2; }

		//FunctionPrototype
		public RuleCall getFunctionPrototypeParserRuleCall_2_0() { return cFunctionPrototypeParserRuleCall_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_1() { return cSEMICOLONTerminalRuleCall_2_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_4() { return cFunctionDefinitionParserRuleCall_4; }
	}

	public class GlobalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GlobalDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUniformDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionPrototypeParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//GlobalDeclaration returns Symbol:
		//	UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
		//	FunctionDefinition;
		public ParserRule getRule() { return rule; }

		//UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
		//FunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//UniformDeclaration SEMICOLON
		public Group getGroup_0() { return cGroup_0; }

		//UniformDeclaration
		public RuleCall getUniformDeclarationParserRuleCall_0_0() { return cUniformDeclarationParserRuleCall_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_1() { return cSEMICOLONTerminalRuleCall_0_1; }

		//AttributeDeclaration SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//AttributeDeclaration
		public RuleCall getAttributeDeclarationParserRuleCall_1_0() { return cAttributeDeclarationParserRuleCall_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1() { return cSEMICOLONTerminalRuleCall_1_1; }

		//FunctionPrototype SEMICOLON
		public Group getGroup_2() { return cGroup_2; }

		//FunctionPrototype
		public RuleCall getFunctionPrototypeParserRuleCall_2_0() { return cFunctionPrototypeParserRuleCall_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_1() { return cSEMICOLONTerminalRuleCall_2_1; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionParserRuleCall_4() { return cFunctionDefinitionParserRuleCall_4; }
	}

	public class LocalDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalDeclaration");
		private final RuleCall cVariableDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LocalDeclaration returns Symbol:
		//	VariableDeclaration;
		public ParserRule getRule() { return rule; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall() { return cVariableDeclarationParserRuleCall; }
	}

	public class UniformDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UniformDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniformDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQualifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifierUNIFORMTerminalRuleCall_1_0 = (RuleCall)cQualifierAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//UniformDeclaration returns Symbol:
		//	{UniformDeclaration} qualifier=UNIFORM type=Type name=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//{UniformDeclaration} qualifier=UNIFORM type=Type name=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//{UniformDeclaration}
		public Action getUniformDeclarationAction_0() { return cUniformDeclarationAction_0; }

		//qualifier=UNIFORM
		public Assignment getQualifierAssignment_1() { return cQualifierAssignment_1; }

		//UNIFORM
		public RuleCall getQualifierUNIFORMTerminalRuleCall_1_0() { return cQualifierUNIFORMTerminalRuleCall_1_0; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_3_0() { return cNameIDENTIFIERTerminalRuleCall_3_0; }
	}

	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInAttributeDeclarationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cQualifierAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cQualifierINTerminalRuleCall_0_1_0 = (RuleCall)cQualifierAssignment_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_0_2_0 = (RuleCall)cTypeAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_3_0 = (RuleCall)cNameAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutAttributeDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cQualifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQualifierOUTTerminalRuleCall_1_1_0 = (RuleCall)cQualifierAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_2_0 = (RuleCall)cTypeAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInOutAttributeDeclarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cQualifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cQualifierINOUTTerminalRuleCall_2_1_0 = (RuleCall)cQualifierAssignment_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_2_0 = (RuleCall)cTypeAssignment_2_2.eContents().get(0);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		
		//AttributeDeclaration returns Symbol:
		//	{InAttributeDeclaration} qualifier=IN type=Type name=IDENTIFIER | {OutAttributeDeclaration} qualifier=OUT type=Type
		//	name=IDENTIFIER | {InOutAttributeDeclaration} qualifier=INOUT type=Type name=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//{InAttributeDeclaration} qualifier=IN type=Type name=IDENTIFIER | {OutAttributeDeclaration} qualifier=OUT type=Type
		//name=IDENTIFIER | {InOutAttributeDeclaration} qualifier=INOUT type=Type name=IDENTIFIER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InAttributeDeclaration} qualifier=IN type=Type name=IDENTIFIER
		public Group getGroup_0() { return cGroup_0; }

		//{InAttributeDeclaration}
		public Action getInAttributeDeclarationAction_0_0() { return cInAttributeDeclarationAction_0_0; }

		//qualifier=IN
		public Assignment getQualifierAssignment_0_1() { return cQualifierAssignment_0_1; }

		//IN
		public RuleCall getQualifierINTerminalRuleCall_0_1_0() { return cQualifierINTerminalRuleCall_0_1_0; }

		//type=Type
		public Assignment getTypeAssignment_0_2() { return cTypeAssignment_0_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_2_0() { return cTypeTypeParserRuleCall_0_2_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_0_3() { return cNameAssignment_0_3; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_3_0() { return cNameIDENTIFIERTerminalRuleCall_0_3_0; }

		//{OutAttributeDeclaration} qualifier=OUT type=Type name=IDENTIFIER
		public Group getGroup_1() { return cGroup_1; }

		//{OutAttributeDeclaration}
		public Action getOutAttributeDeclarationAction_1_0() { return cOutAttributeDeclarationAction_1_0; }

		//qualifier=OUT
		public Assignment getQualifierAssignment_1_1() { return cQualifierAssignment_1_1; }

		//OUT
		public RuleCall getQualifierOUTTerminalRuleCall_1_1_0() { return cQualifierOUTTerminalRuleCall_1_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_2() { return cTypeAssignment_1_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_2_0() { return cTypeTypeParserRuleCall_1_2_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_3_0() { return cNameIDENTIFIERTerminalRuleCall_1_3_0; }

		//{InOutAttributeDeclaration} qualifier=INOUT type=Type name=IDENTIFIER
		public Group getGroup_2() { return cGroup_2; }

		//{InOutAttributeDeclaration}
		public Action getInOutAttributeDeclarationAction_2_0() { return cInOutAttributeDeclarationAction_2_0; }

		//qualifier=INOUT
		public Assignment getQualifierAssignment_2_1() { return cQualifierAssignment_2_1; }

		//INOUT
		public RuleCall getQualifierINOUTTerminalRuleCall_2_1_0() { return cQualifierINOUTTerminalRuleCall_2_1_0; }

		//type=Type
		public Assignment getTypeAssignment_2_2() { return cTypeAssignment_2_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_2_0() { return cTypeTypeParserRuleCall_2_2_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_2_3_0() { return cNameIDENTIFIERTerminalRuleCall_2_3_0; }
	}

	public class FunctionPrototypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionPrototype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cVOIDTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cParamsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_1_0_0 = (RuleCall)cParamsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParamsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionPrototype:
		//	type=Type name=IDENTIFIER "(" (VOID? | params+=Parameter ("," params+=Parameter)*) ")";
		public ParserRule getRule() { return rule; }

		//type=Type name=IDENTIFIER "(" (VOID? | params+=Parameter ("," params+=Parameter)*) ")"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//VOID? | params+=Parameter ("," params+=Parameter)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//VOID?
		public RuleCall getVOIDTerminalRuleCall_3_0() { return cVOIDTerminalRuleCall_3_0; }

		//params+=Parameter ("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_0() { return cParamsAssignment_3_1_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_0_0() { return cParamsParameterParserRuleCall_3_1_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1_1() { return cParamsAssignment_3_1_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//type=Type name=IDENTIFIER
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVoidTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameVOIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Type:
		//	ScalarType | ComplexType | {VoidType} name=VOID;
		public ParserRule getRule() { return rule; }

		//ScalarType | ComplexType | {VoidType} name=VOID
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScalarType
		public RuleCall getScalarTypeParserRuleCall_0() { return cScalarTypeParserRuleCall_0; }

		//ComplexType
		public RuleCall getComplexTypeParserRuleCall_1() { return cComplexTypeParserRuleCall_1; }

		//{VoidType} name=VOID
		public Group getGroup_2() { return cGroup_2; }

		//{VoidType}
		public Action getVoidTypeAction_2_0() { return cVoidTypeAction_2_0; }

		//name=VOID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//VOID
		public RuleCall getNameVOIDTerminalRuleCall_2_1_0() { return cNameVOIDTerminalRuleCall_2_1_0; }
	}

	public class ScalarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameINTXTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUIntTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameUINTTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameBOOLTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFloatTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameFLOATTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		
		//ScalarType:
		//	{IntType} name=INTX | {UIntType} name=UINT | {BoolType} name=BOOL | {FloatType} name=FLOAT;
		public ParserRule getRule() { return rule; }

		//{IntType} name=INTX | {UIntType} name=UINT | {BoolType} name=BOOL | {FloatType} name=FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} name=INTX
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//name=INTX
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//INTX
		public RuleCall getNameINTXTerminalRuleCall_0_1_0() { return cNameINTXTerminalRuleCall_0_1_0; }

		//{UIntType} name=UINT
		public Group getGroup_1() { return cGroup_1; }

		//{UIntType}
		public Action getUIntTypeAction_1_0() { return cUIntTypeAction_1_0; }

		//name=UINT
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//UINT
		public RuleCall getNameUINTTerminalRuleCall_1_1_0() { return cNameUINTTerminalRuleCall_1_1_0; }

		//{BoolType} name=BOOL
		public Group getGroup_2() { return cGroup_2; }

		//{BoolType}
		public Action getBoolTypeAction_2_0() { return cBoolTypeAction_2_0; }

		//name=BOOL
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//BOOL
		public RuleCall getNameBOOLTerminalRuleCall_2_1_0() { return cNameBOOLTerminalRuleCall_2_1_0; }

		//{FloatType} name=FLOAT
		public Group getGroup_3() { return cGroup_3; }

		//{FloatType}
		public Action getFloatTypeAction_3_0() { return cFloatTypeAction_3_0; }

		//name=FLOAT
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//FLOAT
		public RuleCall getNameFLOATTerminalRuleCall_3_1_0() { return cNameFLOATTerminalRuleCall_3_1_0; }
	}

	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVecTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMatTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexType:
		//	VecType | MatType;
		public ParserRule getRule() { return rule; }

		//VecType | MatType
		public Alternatives getAlternatives() { return cAlternatives; }

		//VecType
		public RuleCall getVecTypeParserRuleCall_0() { return cVecTypeParserRuleCall_0; }

		//MatType
		public RuleCall getMatTypeParserRuleCall_1() { return cMatTypeParserRuleCall_1; }
	}

	public class VecTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VecType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cVec2TypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameVEC2TerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVec3TypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameVEC3TerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cVec4TypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameVEC4TerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIVec2TypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIVEC2TerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIVec3TypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIVEC3TerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIVec4TypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameIVEC4TerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cUVec2TypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameUVEC2TerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cUVec3TypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNameUVEC3TerminalRuleCall_7_1_0 = (RuleCall)cNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cUVec4TypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNameUVEC4TerminalRuleCall_8_1_0 = (RuleCall)cNameAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cBVec2TypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNameBVEC2TerminalRuleCall_9_1_0 = (RuleCall)cNameAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cBVec3TypeAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNameBVEC3TerminalRuleCall_10_1_0 = (RuleCall)cNameAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cBVec4TypeAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cNameAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cNameBVEC4TerminalRuleCall_11_1_0 = (RuleCall)cNameAssignment_11_1.eContents().get(0);
		
		//VecType:
		//	{Vec2Type} name=VEC2 | {Vec3Type} name=VEC3 | {Vec4Type} name=VEC4 | {IVec2Type} name=IVEC2 | {IVec3Type} name=IVEC3 |
		//	{IVec4Type} name=IVEC4 | {UVec2Type} name=UVEC2 | {UVec3Type} name=UVEC3 | {UVec4Type} name=UVEC4 | {BVec2Type}
		//	name=BVEC2 | {BVec3Type} name=BVEC3 | {BVec4Type} name=BVEC4;
		public ParserRule getRule() { return rule; }

		//{Vec2Type} name=VEC2 | {Vec3Type} name=VEC3 | {Vec4Type} name=VEC4 | {IVec2Type} name=IVEC2 | {IVec3Type} name=IVEC3 |
		//{IVec4Type} name=IVEC4 | {UVec2Type} name=UVEC2 | {UVec3Type} name=UVEC3 | {UVec4Type} name=UVEC4 | {BVec2Type}
		//name=BVEC2 | {BVec3Type} name=BVEC3 | {BVec4Type} name=BVEC4
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Vec2Type} name=VEC2
		public Group getGroup_0() { return cGroup_0; }

		//{Vec2Type}
		public Action getVec2TypeAction_0_0() { return cVec2TypeAction_0_0; }

		//name=VEC2
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//VEC2
		public RuleCall getNameVEC2TerminalRuleCall_0_1_0() { return cNameVEC2TerminalRuleCall_0_1_0; }

		//{Vec3Type} name=VEC3
		public Group getGroup_1() { return cGroup_1; }

		//{Vec3Type}
		public Action getVec3TypeAction_1_0() { return cVec3TypeAction_1_0; }

		//name=VEC3
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//VEC3
		public RuleCall getNameVEC3TerminalRuleCall_1_1_0() { return cNameVEC3TerminalRuleCall_1_1_0; }

		//{Vec4Type} name=VEC4
		public Group getGroup_2() { return cGroup_2; }

		//{Vec4Type}
		public Action getVec4TypeAction_2_0() { return cVec4TypeAction_2_0; }

		//name=VEC4
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//VEC4
		public RuleCall getNameVEC4TerminalRuleCall_2_1_0() { return cNameVEC4TerminalRuleCall_2_1_0; }

		//{IVec2Type} name=IVEC2
		public Group getGroup_3() { return cGroup_3; }

		//{IVec2Type}
		public Action getIVec2TypeAction_3_0() { return cIVec2TypeAction_3_0; }

		//name=IVEC2
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//IVEC2
		public RuleCall getNameIVEC2TerminalRuleCall_3_1_0() { return cNameIVEC2TerminalRuleCall_3_1_0; }

		//{IVec3Type} name=IVEC3
		public Group getGroup_4() { return cGroup_4; }

		//{IVec3Type}
		public Action getIVec3TypeAction_4_0() { return cIVec3TypeAction_4_0; }

		//name=IVEC3
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//IVEC3
		public RuleCall getNameIVEC3TerminalRuleCall_4_1_0() { return cNameIVEC3TerminalRuleCall_4_1_0; }

		//{IVec4Type} name=IVEC4
		public Group getGroup_5() { return cGroup_5; }

		//{IVec4Type}
		public Action getIVec4TypeAction_5_0() { return cIVec4TypeAction_5_0; }

		//name=IVEC4
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//IVEC4
		public RuleCall getNameIVEC4TerminalRuleCall_5_1_0() { return cNameIVEC4TerminalRuleCall_5_1_0; }

		//{UVec2Type} name=UVEC2
		public Group getGroup_6() { return cGroup_6; }

		//{UVec2Type}
		public Action getUVec2TypeAction_6_0() { return cUVec2TypeAction_6_0; }

		//name=UVEC2
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//UVEC2
		public RuleCall getNameUVEC2TerminalRuleCall_6_1_0() { return cNameUVEC2TerminalRuleCall_6_1_0; }

		//{UVec3Type} name=UVEC3
		public Group getGroup_7() { return cGroup_7; }

		//{UVec3Type}
		public Action getUVec3TypeAction_7_0() { return cUVec3TypeAction_7_0; }

		//name=UVEC3
		public Assignment getNameAssignment_7_1() { return cNameAssignment_7_1; }

		//UVEC3
		public RuleCall getNameUVEC3TerminalRuleCall_7_1_0() { return cNameUVEC3TerminalRuleCall_7_1_0; }

		//{UVec4Type} name=UVEC4
		public Group getGroup_8() { return cGroup_8; }

		//{UVec4Type}
		public Action getUVec4TypeAction_8_0() { return cUVec4TypeAction_8_0; }

		//name=UVEC4
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }

		//UVEC4
		public RuleCall getNameUVEC4TerminalRuleCall_8_1_0() { return cNameUVEC4TerminalRuleCall_8_1_0; }

		//{BVec2Type} name=BVEC2
		public Group getGroup_9() { return cGroup_9; }

		//{BVec2Type}
		public Action getBVec2TypeAction_9_0() { return cBVec2TypeAction_9_0; }

		//name=BVEC2
		public Assignment getNameAssignment_9_1() { return cNameAssignment_9_1; }

		//BVEC2
		public RuleCall getNameBVEC2TerminalRuleCall_9_1_0() { return cNameBVEC2TerminalRuleCall_9_1_0; }

		//{BVec3Type} name=BVEC3
		public Group getGroup_10() { return cGroup_10; }

		//{BVec3Type}
		public Action getBVec3TypeAction_10_0() { return cBVec3TypeAction_10_0; }

		//name=BVEC3
		public Assignment getNameAssignment_10_1() { return cNameAssignment_10_1; }

		//BVEC3
		public RuleCall getNameBVEC3TerminalRuleCall_10_1_0() { return cNameBVEC3TerminalRuleCall_10_1_0; }

		//{BVec4Type} name=BVEC4
		public Group getGroup_11() { return cGroup_11; }

		//{BVec4Type}
		public Action getBVec4TypeAction_11_0() { return cBVec4TypeAction_11_0; }

		//name=BVEC4
		public Assignment getNameAssignment_11_1() { return cNameAssignment_11_1; }

		//BVEC4
		public RuleCall getNameBVEC4TerminalRuleCall_11_1_0() { return cNameBVEC4TerminalRuleCall_11_1_0; }
	}

	public class MatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cMat2TypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameMAT2TerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMat3TypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameMAT3TerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cMat4TypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameMAT4TerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cMat2x2TypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameMAT2X2TerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cMat2x3TypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameMAT2X3TerminalRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cMat2x4TypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameMAT2X4TerminalRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cMat3x2TypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cNameMAT3X2TerminalRuleCall_6_1_0 = (RuleCall)cNameAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cMat3x3TypeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cNameAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cNameMAT3X3TerminalRuleCall_7_1_0 = (RuleCall)cNameAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cMat3x4TypeAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNameMAT3X4TerminalRuleCall_8_1_0 = (RuleCall)cNameAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cMat4x2TypeAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNameMAT4X2TerminalRuleCall_9_1_0 = (RuleCall)cNameAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cMat4x3TypeAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNameMAT4X3TerminalRuleCall_10_1_0 = (RuleCall)cNameAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cMat4x4TypeAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cNameAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cNameMAT4X4TerminalRuleCall_11_1_0 = (RuleCall)cNameAssignment_11_1.eContents().get(0);
		
		//MatType:
		//	{Mat2Type} name=MAT2 | {Mat3Type} name=MAT3 | {Mat4Type} name=MAT4 | {Mat2x2Type} name=MAT2X2 | {Mat2x3Type}
		//	name=MAT2X3 | {Mat2x4Type} name=MAT2X4 | {Mat3x2Type} name=MAT3X2 | {Mat3x3Type} name=MAT3X3 | {Mat3x4Type}
		//	name=MAT3X4 | {Mat4x2Type} name=MAT4X2 | {Mat4x3Type} name=MAT4X3 | {Mat4x4Type} name=MAT4X4;
		public ParserRule getRule() { return rule; }

		//{Mat2Type} name=MAT2 | {Mat3Type} name=MAT3 | {Mat4Type} name=MAT4 | {Mat2x2Type} name=MAT2X2 | {Mat2x3Type} name=MAT2X3
		//| {Mat2x4Type} name=MAT2X4 | {Mat3x2Type} name=MAT3X2 | {Mat3x3Type} name=MAT3X3 | {Mat3x4Type} name=MAT3X4 |
		//{Mat4x2Type} name=MAT4X2 | {Mat4x3Type} name=MAT4X3 | {Mat4x4Type} name=MAT4X4
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Mat2Type} name=MAT2
		public Group getGroup_0() { return cGroup_0; }

		//{Mat2Type}
		public Action getMat2TypeAction_0_0() { return cMat2TypeAction_0_0; }

		//name=MAT2
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//MAT2
		public RuleCall getNameMAT2TerminalRuleCall_0_1_0() { return cNameMAT2TerminalRuleCall_0_1_0; }

		//{Mat3Type} name=MAT3
		public Group getGroup_1() { return cGroup_1; }

		//{Mat3Type}
		public Action getMat3TypeAction_1_0() { return cMat3TypeAction_1_0; }

		//name=MAT3
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//MAT3
		public RuleCall getNameMAT3TerminalRuleCall_1_1_0() { return cNameMAT3TerminalRuleCall_1_1_0; }

		//{Mat4Type} name=MAT4
		public Group getGroup_2() { return cGroup_2; }

		//{Mat4Type}
		public Action getMat4TypeAction_2_0() { return cMat4TypeAction_2_0; }

		//name=MAT4
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//MAT4
		public RuleCall getNameMAT4TerminalRuleCall_2_1_0() { return cNameMAT4TerminalRuleCall_2_1_0; }

		//{Mat2x2Type} name=MAT2X2
		public Group getGroup_3() { return cGroup_3; }

		//{Mat2x2Type}
		public Action getMat2x2TypeAction_3_0() { return cMat2x2TypeAction_3_0; }

		//name=MAT2X2
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//MAT2X2
		public RuleCall getNameMAT2X2TerminalRuleCall_3_1_0() { return cNameMAT2X2TerminalRuleCall_3_1_0; }

		//{Mat2x3Type} name=MAT2X3
		public Group getGroup_4() { return cGroup_4; }

		//{Mat2x3Type}
		public Action getMat2x3TypeAction_4_0() { return cMat2x3TypeAction_4_0; }

		//name=MAT2X3
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//MAT2X3
		public RuleCall getNameMAT2X3TerminalRuleCall_4_1_0() { return cNameMAT2X3TerminalRuleCall_4_1_0; }

		//{Mat2x4Type} name=MAT2X4
		public Group getGroup_5() { return cGroup_5; }

		//{Mat2x4Type}
		public Action getMat2x4TypeAction_5_0() { return cMat2x4TypeAction_5_0; }

		//name=MAT2X4
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//MAT2X4
		public RuleCall getNameMAT2X4TerminalRuleCall_5_1_0() { return cNameMAT2X4TerminalRuleCall_5_1_0; }

		//{Mat3x2Type} name=MAT3X2
		public Group getGroup_6() { return cGroup_6; }

		//{Mat3x2Type}
		public Action getMat3x2TypeAction_6_0() { return cMat3x2TypeAction_6_0; }

		//name=MAT3X2
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//MAT3X2
		public RuleCall getNameMAT3X2TerminalRuleCall_6_1_0() { return cNameMAT3X2TerminalRuleCall_6_1_0; }

		//{Mat3x3Type} name=MAT3X3
		public Group getGroup_7() { return cGroup_7; }

		//{Mat3x3Type}
		public Action getMat3x3TypeAction_7_0() { return cMat3x3TypeAction_7_0; }

		//name=MAT3X3
		public Assignment getNameAssignment_7_1() { return cNameAssignment_7_1; }

		//MAT3X3
		public RuleCall getNameMAT3X3TerminalRuleCall_7_1_0() { return cNameMAT3X3TerminalRuleCall_7_1_0; }

		//{Mat3x4Type} name=MAT3X4
		public Group getGroup_8() { return cGroup_8; }

		//{Mat3x4Type}
		public Action getMat3x4TypeAction_8_0() { return cMat3x4TypeAction_8_0; }

		//name=MAT3X4
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }

		//MAT3X4
		public RuleCall getNameMAT3X4TerminalRuleCall_8_1_0() { return cNameMAT3X4TerminalRuleCall_8_1_0; }

		//{Mat4x2Type} name=MAT4X2
		public Group getGroup_9() { return cGroup_9; }

		//{Mat4x2Type}
		public Action getMat4x2TypeAction_9_0() { return cMat4x2TypeAction_9_0; }

		//name=MAT4X2
		public Assignment getNameAssignment_9_1() { return cNameAssignment_9_1; }

		//MAT4X2
		public RuleCall getNameMAT4X2TerminalRuleCall_9_1_0() { return cNameMAT4X2TerminalRuleCall_9_1_0; }

		//{Mat4x3Type} name=MAT4X3
		public Group getGroup_10() { return cGroup_10; }

		//{Mat4x3Type}
		public Action getMat4x3TypeAction_10_0() { return cMat4x3TypeAction_10_0; }

		//name=MAT4X3
		public Assignment getNameAssignment_10_1() { return cNameAssignment_10_1; }

		//MAT4X3
		public RuleCall getNameMAT4X3TerminalRuleCall_10_1_0() { return cNameMAT4X3TerminalRuleCall_10_1_0; }

		//{Mat4x4Type} name=MAT4X4
		public Group getGroup_11() { return cGroup_11; }

		//{Mat4x4Type}
		public Action getMat4x4TypeAction_11_0() { return cMat4x4TypeAction_11_0; }

		//name=MAT4X4
		public Assignment getNameAssignment_11_1() { return cNameAssignment_11_1; }

		//MAT4X4
		public RuleCall getNameMAT4X4TerminalRuleCall_11_1_0() { return cNameMAT4X4TerminalRuleCall_11_1_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFunctionPrototypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLEFT_BRACETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cRIGHT_BRACETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FunctionDefinition:
		//	FunctionPrototype LEFT_BRACE statements+=Statement* RIGHT_BRACE;
		public ParserRule getRule() { return rule; }

		//FunctionPrototype LEFT_BRACE statements+=Statement* RIGHT_BRACE
		public Group getGroup() { return cGroup; }

		//FunctionPrototype
		public RuleCall getFunctionPrototypeParserRuleCall_0() { return cFunctionPrototypeParserRuleCall_0; }

		//LEFT_BRACE
		public RuleCall getLEFT_BRACETerminalRuleCall_1() { return cLEFT_BRACETerminalRuleCall_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//RIGHT_BRACE
		public RuleCall getRIGHT_BRACETerminalRuleCall_3() { return cRIGHT_BRACETerminalRuleCall_3; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameFunctionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFuncFunctionDefinitionCrossReference_1_0 = (CrossReference)cFuncAssignment_1.eContents().get(0);
		private final RuleCall cFuncFunctionDefinitionIDENTIFIERTerminalRuleCall_1_0_1 = (RuleCall)cFuncFunctionDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall:
		//	name="function" func=[FunctionDefinition|IDENTIFIER] "(" (args+=Exp ("," args+=Exp)*)? ")";
		public ParserRule getRule() { return rule; }

		//name="function" func=[FunctionDefinition|IDENTIFIER] "(" (args+=Exp ("," args+=Exp)*)? ")"
		public Group getGroup() { return cGroup; }

		//name="function"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"function"
		public Keyword getNameFunctionKeyword_0_0() { return cNameFunctionKeyword_0_0; }

		//func=[FunctionDefinition|IDENTIFIER]
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }

		//[FunctionDefinition|IDENTIFIER]
		public CrossReference getFuncFunctionDefinitionCrossReference_1_0() { return cFuncFunctionDefinitionCrossReference_1_0; }

		//IDENTIFIER
		public RuleCall getFuncFunctionDefinitionIDENTIFIERTerminalRuleCall_1_0_1() { return cFuncFunctionDefinitionIDENTIFIERTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Exp ("," args+=Exp)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Exp
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Exp
		public RuleCall getArgsExpParserRuleCall_3_0_0() { return cArgsExpParserRuleCall_3_0_0; }

		//("," args+=Exp)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Exp
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Exp
		public RuleCall getArgsExpParserRuleCall_3_1_1_0() { return cArgsExpParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssignmentStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJumpStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cSymbolRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cSymbolAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_4_1_0 = (CrossReference)cSymbolAssignment_4_1.eContents().get(0);
		private final RuleCall cSymbolSymbolIDENTIFIERTerminalRuleCall_4_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cActualsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cActualsExpParserRuleCall_4_2_1_0 = (RuleCall)cActualsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cActualsAssignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final RuleCall cActualsExpParserRuleCall_4_2_2_1_0 = (RuleCall)cActualsAssignment_4_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2_3 = (Keyword)cGroup_4_2.eContents().get(3);
		private final RuleCall cSEMICOLONTerminalRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIfStatementAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cIFTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cConditionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cConditionExpParserRuleCall_5_3_0 = (RuleCall)cConditionAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cThenAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cThenStatementParserRuleCall_5_5_0 = (RuleCall)cThenAssignment_5_5.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cGroup_5.eContents().get(6);
		private final RuleCall cELSETerminalRuleCall_5_6_0 = (RuleCall)cGroup_5_6.eContents().get(0);
		private final Assignment cElseAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cElseStatementParserRuleCall_5_6_1_0 = (RuleCall)cElseAssignment_5_6_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cWhileStatementAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cWHILETerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cConditionAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cConditionExpParserRuleCall_6_3_0 = (RuleCall)cConditionAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cDoAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cDoStatementParserRuleCall_6_5_0 = (RuleCall)cDoAssignment_6_5.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cWhileStatementAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final RuleCall cDOTerminalRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Assignment cDoAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDoBlockStatementParserRuleCall_7_2_0 = (RuleCall)cDoAssignment_7_2.eContents().get(0);
		private final RuleCall cWHILETerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cConditionAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cConditionExpParserRuleCall_7_5_0 = (RuleCall)cConditionAssignment_7_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final RuleCall cSEMICOLONTerminalRuleCall_7_7 = (RuleCall)cGroup_7.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cForStatementAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cFORTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cAAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final Alternatives cAAlternatives_8_3_0 = (Alternatives)cAAssignment_8_3.eContents().get(0);
		private final RuleCall cAExpParserRuleCall_8_3_0_0 = (RuleCall)cAAlternatives_8_3_0.eContents().get(0);
		private final RuleCall cADeclarationParserRuleCall_8_3_0_1 = (RuleCall)cAAlternatives_8_3_0.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_8_4 = (RuleCall)cGroup_8.eContents().get(4);
		private final Assignment cBAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cBExpParserRuleCall_8_5_0 = (RuleCall)cBAssignment_8_5.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_8_6 = (RuleCall)cGroup_8.eContents().get(6);
		private final Assignment cCAssignment_8_7 = (Assignment)cGroup_8.eContents().get(7);
		private final RuleCall cCExpParserRuleCall_8_7_0 = (RuleCall)cCAssignment_8_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_8 = (Keyword)cGroup_8.eContents().get(8);
		private final Assignment cDoAssignment_8_9 = (Assignment)cGroup_8.eContents().get(9);
		private final RuleCall cDoStatementParserRuleCall_8_9_0 = (RuleCall)cDoAssignment_8_9.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cSwitchStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final RuleCall cSWITCHTerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Assignment cAAssignment_9_3 = (Assignment)cGroup_9.eContents().get(3);
		private final RuleCall cAExpParserRuleCall_9_3_0 = (RuleCall)cAAssignment_9_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final RuleCall cLEFT_BRACETerminalRuleCall_9_5 = (RuleCall)cGroup_9.eContents().get(5);
		private final Assignment cCasesAssignment_9_6 = (Assignment)cGroup_9.eContents().get(6);
		private final RuleCall cCasesSwitchCaseParserRuleCall_9_6_0 = (RuleCall)cCasesAssignment_9_6.eContents().get(0);
		private final RuleCall cRIGHT_BRACETerminalRuleCall_9_7 = (RuleCall)cGroup_9.eContents().get(7);
		
		//Statement:
		//	BlockStatement | VariableDeclaration | AssignmentStatement | JumpStatement | {SymbolRef} symbol=[Symbol|IDENTIFIER]
		//	("(" actuals+=Exp? ("," actuals+=Exp)* ")")? SEMICOLON | {IfStatement} IF "(" condition=Exp ")" then=Statement (ELSE
		//	else=Statement)? | {WhileStatement} WHILE "(" condition=Exp ")" do=Statement | {WhileStatement} DO do=BlockStatement
		//	WHILE "(" condition=Exp ")" SEMICOLON | {ForStatement} FOR "(" a=(Exp | Declaration) SEMICOLON b=Exp? SEMICOLON c=Exp?
		//	")" do=Statement | // TODO fix switch statement
		//	{SwitchStatement} SWITCH "(" a=Exp ")" LEFT_BRACE cases+=SwitchCase RIGHT_BRACE;
		public ParserRule getRule() { return rule; }

		//BlockStatement | VariableDeclaration | AssignmentStatement | JumpStatement | {SymbolRef} symbol=[Symbol|IDENTIFIER] ("("
		//actuals+=Exp? ("," actuals+=Exp)* ")")? SEMICOLON | {IfStatement} IF "(" condition=Exp ")" then=Statement (ELSE
		//else=Statement)? | {WhileStatement} WHILE "(" condition=Exp ")" do=Statement | {WhileStatement} DO do=BlockStatement
		//WHILE "(" condition=Exp ")" SEMICOLON | {ForStatement} FOR "(" a=(Exp | Declaration) SEMICOLON b=Exp? SEMICOLON c=Exp?
		//")" do=Statement | // TODO fix switch statement
		//{SwitchStatement} SWITCH "(" a=Exp ")" LEFT_BRACE cases+=SwitchCase RIGHT_BRACE
		public Alternatives getAlternatives() { return cAlternatives; }

		//BlockStatement
		public RuleCall getBlockStatementParserRuleCall_0() { return cBlockStatementParserRuleCall_0; }

		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1() { return cVariableDeclarationParserRuleCall_1; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_2() { return cAssignmentStatementParserRuleCall_2; }

		//JumpStatement
		public RuleCall getJumpStatementParserRuleCall_3() { return cJumpStatementParserRuleCall_3; }

		//{SymbolRef} symbol=[Symbol|IDENTIFIER] ("(" actuals+=Exp? ("," actuals+=Exp)* ")")? SEMICOLON
		public Group getGroup_4() { return cGroup_4; }

		//{SymbolRef}
		public Action getSymbolRefAction_4_0() { return cSymbolRefAction_4_0; }

		//symbol=[Symbol|IDENTIFIER]
		public Assignment getSymbolAssignment_4_1() { return cSymbolAssignment_4_1; }

		//[Symbol|IDENTIFIER]
		public CrossReference getSymbolSymbolCrossReference_4_1_0() { return cSymbolSymbolCrossReference_4_1_0; }

		//IDENTIFIER
		public RuleCall getSymbolSymbolIDENTIFIERTerminalRuleCall_4_1_0_1() { return cSymbolSymbolIDENTIFIERTerminalRuleCall_4_1_0_1; }

		//("(" actuals+=Exp? ("," actuals+=Exp)* ")")?
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_2_0() { return cLeftParenthesisKeyword_4_2_0; }

		//actuals+=Exp?
		public Assignment getActualsAssignment_4_2_1() { return cActualsAssignment_4_2_1; }

		//Exp
		public RuleCall getActualsExpParserRuleCall_4_2_1_0() { return cActualsExpParserRuleCall_4_2_1_0; }

		//("," actuals+=Exp)*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }

		//","
		public Keyword getCommaKeyword_4_2_2_0() { return cCommaKeyword_4_2_2_0; }

		//actuals+=Exp
		public Assignment getActualsAssignment_4_2_2_1() { return cActualsAssignment_4_2_2_1; }

		//Exp
		public RuleCall getActualsExpParserRuleCall_4_2_2_1_0() { return cActualsExpParserRuleCall_4_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2_3() { return cRightParenthesisKeyword_4_2_3; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4_3() { return cSEMICOLONTerminalRuleCall_4_3; }

		//{IfStatement} IF "(" condition=Exp ")" then=Statement (ELSE else=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//{IfStatement}
		public Action getIfStatementAction_5_0() { return cIfStatementAction_5_0; }

		//IF
		public RuleCall getIFTerminalRuleCall_5_1() { return cIFTerminalRuleCall_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }

		//condition=Exp
		public Assignment getConditionAssignment_5_3() { return cConditionAssignment_5_3; }

		//Exp
		public RuleCall getConditionExpParserRuleCall_5_3_0() { return cConditionExpParserRuleCall_5_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//then=Statement
		public Assignment getThenAssignment_5_5() { return cThenAssignment_5_5; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_5_5_0() { return cThenStatementParserRuleCall_5_5_0; }

		//(=> ELSE else=Statement)?
		public Group getGroup_5_6() { return cGroup_5_6; }

		//=> ELSE
		public RuleCall getELSETerminalRuleCall_5_6_0() { return cELSETerminalRuleCall_5_6_0; }

		//else=Statement
		public Assignment getElseAssignment_5_6_1() { return cElseAssignment_5_6_1; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_5_6_1_0() { return cElseStatementParserRuleCall_5_6_1_0; }

		//{WhileStatement} WHILE "(" condition=Exp ")" do=Statement
		public Group getGroup_6() { return cGroup_6; }

		//{WhileStatement}
		public Action getWhileStatementAction_6_0() { return cWhileStatementAction_6_0; }

		//WHILE
		public RuleCall getWHILETerminalRuleCall_6_1() { return cWHILETerminalRuleCall_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//condition=Exp
		public Assignment getConditionAssignment_6_3() { return cConditionAssignment_6_3; }

		//Exp
		public RuleCall getConditionExpParserRuleCall_6_3_0() { return cConditionExpParserRuleCall_6_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }

		//do=Statement
		public Assignment getDoAssignment_6_5() { return cDoAssignment_6_5; }

		//Statement
		public RuleCall getDoStatementParserRuleCall_6_5_0() { return cDoStatementParserRuleCall_6_5_0; }

		//{WhileStatement} DO do=BlockStatement WHILE "(" condition=Exp ")" SEMICOLON
		public Group getGroup_7() { return cGroup_7; }

		//{WhileStatement}
		public Action getWhileStatementAction_7_0() { return cWhileStatementAction_7_0; }

		//DO
		public RuleCall getDOTerminalRuleCall_7_1() { return cDOTerminalRuleCall_7_1; }

		//do=BlockStatement
		public Assignment getDoAssignment_7_2() { return cDoAssignment_7_2; }

		//BlockStatement
		public RuleCall getDoBlockStatementParserRuleCall_7_2_0() { return cDoBlockStatementParserRuleCall_7_2_0; }

		//WHILE
		public RuleCall getWHILETerminalRuleCall_7_3() { return cWHILETerminalRuleCall_7_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_4() { return cLeftParenthesisKeyword_7_4; }

		//condition=Exp
		public Assignment getConditionAssignment_7_5() { return cConditionAssignment_7_5; }

		//Exp
		public RuleCall getConditionExpParserRuleCall_7_5_0() { return cConditionExpParserRuleCall_7_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_6() { return cRightParenthesisKeyword_7_6; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_7_7() { return cSEMICOLONTerminalRuleCall_7_7; }

		//{ForStatement} FOR "(" a=(Exp | Declaration) SEMICOLON b=Exp? SEMICOLON c=Exp? ")" do=Statement
		public Group getGroup_8() { return cGroup_8; }

		//{ForStatement}
		public Action getForStatementAction_8_0() { return cForStatementAction_8_0; }

		//FOR
		public RuleCall getFORTerminalRuleCall_8_1() { return cFORTerminalRuleCall_8_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }

		//a=(Exp | Declaration)
		public Assignment getAAssignment_8_3() { return cAAssignment_8_3; }

		//Exp | Declaration
		public Alternatives getAAlternatives_8_3_0() { return cAAlternatives_8_3_0; }

		//Exp
		public RuleCall getAExpParserRuleCall_8_3_0_0() { return cAExpParserRuleCall_8_3_0_0; }

		//Declaration
		public RuleCall getADeclarationParserRuleCall_8_3_0_1() { return cADeclarationParserRuleCall_8_3_0_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8_4() { return cSEMICOLONTerminalRuleCall_8_4; }

		//b=Exp?
		public Assignment getBAssignment_8_5() { return cBAssignment_8_5; }

		//Exp
		public RuleCall getBExpParserRuleCall_8_5_0() { return cBExpParserRuleCall_8_5_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_8_6() { return cSEMICOLONTerminalRuleCall_8_6; }

		//c=Exp?
		public Assignment getCAssignment_8_7() { return cCAssignment_8_7; }

		//Exp
		public RuleCall getCExpParserRuleCall_8_7_0() { return cCExpParserRuleCall_8_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_8() { return cRightParenthesisKeyword_8_8; }

		//do=Statement
		public Assignment getDoAssignment_8_9() { return cDoAssignment_8_9; }

		//Statement
		public RuleCall getDoStatementParserRuleCall_8_9_0() { return cDoStatementParserRuleCall_8_9_0; }

		//// TODO fix switch statement
		//{SwitchStatement} SWITCH "(" a=Exp ")" LEFT_BRACE cases+=SwitchCase RIGHT_BRACE
		public Group getGroup_9() { return cGroup_9; }

		//// TODO fix switch statement
		//{SwitchStatement}
		public Action getSwitchStatementAction_9_0() { return cSwitchStatementAction_9_0; }

		//SWITCH
		public RuleCall getSWITCHTerminalRuleCall_9_1() { return cSWITCHTerminalRuleCall_9_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }

		//a=Exp
		public Assignment getAAssignment_9_3() { return cAAssignment_9_3; }

		//Exp
		public RuleCall getAExpParserRuleCall_9_3_0() { return cAExpParserRuleCall_9_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//LEFT_BRACE
		public RuleCall getLEFT_BRACETerminalRuleCall_9_5() { return cLEFT_BRACETerminalRuleCall_9_5; }

		//cases+=SwitchCase
		public Assignment getCasesAssignment_9_6() { return cCasesAssignment_9_6; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_9_6_0() { return cCasesSwitchCaseParserRuleCall_9_6_0; }

		//RIGHT_BRACE
		public RuleCall getRIGHT_BRACETerminalRuleCall_9_7() { return cRIGHT_BRACETerminalRuleCall_9_7; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCASETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cCaseAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cCaseINTCONSTANTTerminalRuleCall_0_1_0_0 = (RuleCall)cCaseAssignment_0_1_0.eContents().get(0);
		private final Assignment cCaseAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cCaseUINTCONSTANTTerminalRuleCall_0_1_1_0 = (RuleCall)cCaseAssignment_0_1_1.eContents().get(0);
		private final Assignment cFcaseAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cFcaseFLOATCONSTANTTerminalRuleCall_0_1_2_0 = (RuleCall)cFcaseAssignment_0_1_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cThenAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cThenStatementParserRuleCall_0_3_0 = (RuleCall)cThenAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDEFAULTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenStatementParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		
		//SwitchCase:
		//	CASE (case=INTCONSTANT | case=UINTCONSTANT | fcase=FLOATCONSTANT) COLON then=Statement | DEFAULT COLON then=Statement;
		public ParserRule getRule() { return rule; }

		//CASE (case=INTCONSTANT | case=UINTCONSTANT | fcase=FLOATCONSTANT) COLON then=Statement | DEFAULT COLON then=Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//CASE (case=INTCONSTANT | case=UINTCONSTANT | fcase=FLOATCONSTANT) COLON then=Statement
		public Group getGroup_0() { return cGroup_0; }

		//CASE
		public RuleCall getCASETerminalRuleCall_0_0() { return cCASETerminalRuleCall_0_0; }

		//case=INTCONSTANT | case=UINTCONSTANT | fcase=FLOATCONSTANT
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//case=INTCONSTANT
		public Assignment getCaseAssignment_0_1_0() { return cCaseAssignment_0_1_0; }

		//INTCONSTANT
		public RuleCall getCaseINTCONSTANTTerminalRuleCall_0_1_0_0() { return cCaseINTCONSTANTTerminalRuleCall_0_1_0_0; }

		//case=UINTCONSTANT
		public Assignment getCaseAssignment_0_1_1() { return cCaseAssignment_0_1_1; }

		//UINTCONSTANT
		public RuleCall getCaseUINTCONSTANTTerminalRuleCall_0_1_1_0() { return cCaseUINTCONSTANTTerminalRuleCall_0_1_1_0; }

		//fcase=FLOATCONSTANT
		public Assignment getFcaseAssignment_0_1_2() { return cFcaseAssignment_0_1_2; }

		//FLOATCONSTANT
		public RuleCall getFcaseFLOATCONSTANTTerminalRuleCall_0_1_2_0() { return cFcaseFLOATCONSTANTTerminalRuleCall_0_1_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_0_2() { return cCOLONTerminalRuleCall_0_2; }

		//then=Statement
		public Assignment getThenAssignment_0_3() { return cThenAssignment_0_3; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_0_3_0() { return cThenStatementParserRuleCall_0_3_0; }

		//DEFAULT COLON then=Statement
		public Group getGroup_1() { return cGroup_1; }

		//DEFAULT
		public RuleCall getDEFAULTTerminalRuleCall_1_0() { return cDEFAULTTerminalRuleCall_1_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_1() { return cCOLONTerminalRuleCall_1_1; }

		//then=Statement
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }

		//Statement
		public RuleCall getThenStatementParserRuleCall_1_2_0() { return cThenStatementParserRuleCall_1_2_0; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_BRACETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//BlockStatement:
		//	LEFT_BRACE statements+=Statement* RIGHT_BRACE;
		public ParserRule getRule() { return rule; }

		//LEFT_BRACE statements+=Statement* RIGHT_BRACE
		public Group getGroup() { return cGroup; }

		//LEFT_BRACE
		public RuleCall getLEFT_BRACETerminalRuleCall_0() { return cLEFT_BRACETerminalRuleCall_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//RIGHT_BRACE
		public RuleCall getRIGHT_BRACETerminalRuleCall_2() { return cRIGHT_BRACETerminalRuleCall_2; }
	}

	public class JumpStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JumpStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCONTINUETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBREAKTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cReturnAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReturnAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Assignment cValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValueExpParserRuleCall_3_2_0 = (RuleCall)cValueAssignment_3_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cDISCARDTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		
		//JumpStatement:
		//	CONTINUE SEMICOLON | BREAK SEMICOLON | {Return} RETURN SEMICOLON | {Return} RETURN value=Exp SEMICOLON | DISCARD
		//	SEMICOLON;
		public ParserRule getRule() { return rule; }

		//CONTINUE SEMICOLON | BREAK SEMICOLON | {Return} RETURN SEMICOLON | {Return} RETURN value=Exp SEMICOLON | DISCARD
		//SEMICOLON
		public Alternatives getAlternatives() { return cAlternatives; }

		//CONTINUE SEMICOLON
		public Group getGroup_0() { return cGroup_0; }

		//CONTINUE
		public RuleCall getCONTINUETerminalRuleCall_0_0() { return cCONTINUETerminalRuleCall_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_0_1() { return cSEMICOLONTerminalRuleCall_0_1; }

		//BREAK SEMICOLON
		public Group getGroup_1() { return cGroup_1; }

		//BREAK
		public RuleCall getBREAKTerminalRuleCall_1_0() { return cBREAKTerminalRuleCall_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1() { return cSEMICOLONTerminalRuleCall_1_1; }

		//{Return} RETURN SEMICOLON
		public Group getGroup_2() { return cGroup_2; }

		//{Return}
		public Action getReturnAction_2_0() { return cReturnAction_2_0; }

		//RETURN
		public RuleCall getRETURNTerminalRuleCall_2_1() { return cRETURNTerminalRuleCall_2_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_2_2() { return cSEMICOLONTerminalRuleCall_2_2; }

		//{Return} RETURN value=Exp SEMICOLON
		public Group getGroup_3() { return cGroup_3; }

		//{Return}
		public Action getReturnAction_3_0() { return cReturnAction_3_0; }

		//RETURN
		public RuleCall getRETURNTerminalRuleCall_3_1() { return cRETURNTerminalRuleCall_3_1; }

		//value=Exp
		public Assignment getValueAssignment_3_2() { return cValueAssignment_3_2; }

		//Exp
		public RuleCall getValueExpParserRuleCall_3_2_0() { return cValueExpParserRuleCall_3_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3_3() { return cSEMICOLONTerminalRuleCall_3_3; }

		//DISCARD SEMICOLON
		public Group getGroup_4() { return cGroup_4; }

		//DISCARD
		public RuleCall getDISCARDTerminalRuleCall_4_0() { return cDISCARDTerminalRuleCall_4_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_4_1() { return cSEMICOLONTerminalRuleCall_4_1; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitExpParserRuleCall_2_1_0 = (RuleCall)cInitAssignment_2_1.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VariableDeclaration:
		//	type=Type name=IDENTIFIER ("=" init=Exp)? SEMICOLON;
		public ParserRule getRule() { return rule; }

		//type=Type name=IDENTIFIER ("=" init=Exp)? SEMICOLON
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_1_0() { return cNameIDENTIFIERTerminalRuleCall_1_0; }

		//("=" init=Exp)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//init=Exp
		public Assignment getInitAssignment_2_1() { return cInitAssignment_2_1; }

		//Exp
		public RuleCall getInitExpParserRuleCall_2_1_0() { return cInitExpParserRuleCall_2_1_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableSymbolCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableSymbolIDENTIFIERTerminalRuleCall_0_0_1 = (RuleCall)cVariableSymbolCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//AssignmentStatement:
		//	variable=[Symbol|IDENTIFIER] "=" right=Exp SEMICOLON;
		public ParserRule getRule() { return rule; }

		//variable=[Symbol|IDENTIFIER] "=" right=Exp SEMICOLON
		public Group getGroup() { return cGroup; }

		//variable=[Symbol|IDENTIFIER]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[Symbol|IDENTIFIER]
		public CrossReference getVariableSymbolCrossReference_0_0() { return cVariableSymbolCrossReference_0_0; }

		//IDENTIFIER
		public RuleCall getVariableSymbolIDENTIFIERTerminalRuleCall_0_0_1() { return cVariableSymbolIDENTIFIERTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_3() { return cSEMICOLONTerminalRuleCall_3; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cInlineIfExpConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cQUESTIONTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cThenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenExpParserRuleCall_1_2_0 = (RuleCall)cThenAssignment_1_2.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cElseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElseExpParserRuleCall_1_4_0 = (RuleCall)cElseAssignment_1_4.eContents().get(0);
		
		//Exp:
		//	LogicExp ({InlineIfExp.condition=current} => QUESTION then=Exp COLON else=Exp)?;
		public ParserRule getRule() { return rule; }

		//LogicExp ({InlineIfExp.condition=current} => QUESTION then=Exp COLON else=Exp)?
		public Group getGroup() { return cGroup; }

		//LogicExp
		public RuleCall getLogicExpParserRuleCall_0() { return cLogicExpParserRuleCall_0; }

		//({InlineIfExp.condition=current} => QUESTION then=Exp COLON else=Exp)?
		public Group getGroup_1() { return cGroup_1; }

		//{InlineIfExp.condition=current}
		public Action getInlineIfExpConditionAction_1_0() { return cInlineIfExpConditionAction_1_0; }

		//=> QUESTION
		public RuleCall getQUESTIONTerminalRuleCall_1_1() { return cQUESTIONTerminalRuleCall_1_1; }

		//then=Exp
		public Assignment getThenAssignment_1_2() { return cThenAssignment_1_2; }

		//Exp
		public RuleCall getThenExpParserRuleCall_1_2_0() { return cThenExpParserRuleCall_1_2_0; }

		//COLON
		public RuleCall getCOLONTerminalRuleCall_1_3() { return cCOLONTerminalRuleCall_1_3; }

		//else=Exp
		public Assignment getElseAssignment_1_4() { return cElseAssignment_1_4; }

		//Exp
		public RuleCall getElseExpParserRuleCall_1_4_0() { return cElseExpParserRuleCall_1_4_0; }
	}

	public class LogicExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpLogicOpEnumRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//LogicExp returns Exp:
		//	AddExp ({LogicExp.left=current} op=LogicOp right=AddExp)?;
		public ParserRule getRule() { return rule; }

		//AddExp ({LogicExp.left=current} op=LogicOp right=AddExp)?
		public Group getGroup() { return cGroup; }

		//AddExp
		public RuleCall getAddExpParserRuleCall_0() { return cAddExpParserRuleCall_0; }

		//({LogicExp.left=current} op=LogicOp right=AddExp)?
		public Group getGroup_1() { return cGroup_1; }

		//{LogicExp.left=current}
		public Action getLogicExpLeftAction_1_0() { return cLogicExpLeftAction_1_0; }

		//op=LogicOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//LogicOp
		public RuleCall getOpLogicOpEnumRuleCall_1_1_0() { return cOpLogicOpEnumRuleCall_1_1_0; }

		//right=AddExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AddExp
		public RuleCall getRightAddExpParserRuleCall_1_2_0() { return cRightAddExpParserRuleCall_1_2_0; }
	}

	public class AddExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAddOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExp returns Exp:
		//	MulExp ({AddExp.left=current} op=AddOp right=MulExp)*;
		public ParserRule getRule() { return rule; }

		//MulExp ({AddExp.left=current} op=AddOp right=MulExp)*
		public Group getGroup() { return cGroup; }

		//MulExp
		public RuleCall getMulExpParserRuleCall_0() { return cMulExpParserRuleCall_0; }

		//({AddExp.left=current} op=AddOp right=MulExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{AddExp.left=current}
		public Action getAddExpLeftAction_1_0() { return cAddExpLeftAction_1_0; }

		//op=AddOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//AddOp
		public RuleCall getOpAddOpParserRuleCall_1_1_0() { return cOpAddOpParserRuleCall_1_1_0; }

		//right=MulExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MulExp
		public RuleCall getRightMulExpParserRuleCall_1_2_0() { return cRightMulExpParserRuleCall_1_2_0; }
	}

	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AddOp:
		//	PLUS | DASH;
		public ParserRule getRule() { return rule; }

		//PLUS | DASH
		public Alternatives getAlternatives() { return cAlternatives; }

		//PLUS
		public RuleCall getPLUSTerminalRuleCall_0() { return cPLUSTerminalRuleCall_0; }

		//DASH
		public RuleCall getDASHTerminalRuleCall_1() { return cDASHTerminalRuleCall_1; }
	}

	public class MulExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMulOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPostfixExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulExp returns Exp:
		//	PostfixExp ({MulExp.left=current} op=MulOp right=PostfixExp)*;
		public ParserRule getRule() { return rule; }

		//PostfixExp ({MulExp.left=current} op=MulOp right=PostfixExp)*
		public Group getGroup() { return cGroup; }

		//PostfixExp
		public RuleCall getPostfixExpParserRuleCall_0() { return cPostfixExpParserRuleCall_0; }

		//({MulExp.left=current} op=MulOp right=PostfixExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{MulExp.left=current}
		public Action getMulExpLeftAction_1_0() { return cMulExpLeftAction_1_0; }

		//op=MulOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MulOp
		public RuleCall getOpMulOpParserRuleCall_1_1_0() { return cOpMulOpParserRuleCall_1_1_0; }

		//right=PostfixExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PostfixExp
		public RuleCall getRightPostfixExpParserRuleCall_1_2_0() { return cRightPostfixExpParserRuleCall_1_2_0; }
	}

	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTARTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSLASHTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPERCENTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//MulOp:
		//	STAR | SLASH | PERCENT;
		public ParserRule getRule() { return rule; }

		//STAR | SLASH | PERCENT
		public Alternatives getAlternatives() { return cAlternatives; }

		//STAR
		public RuleCall getSTARTerminalRuleCall_0() { return cSTARTerminalRuleCall_0; }

		//SLASH
		public RuleCall getSLASHTerminalRuleCall_1() { return cSLASHTerminalRuleCall_1; }

		//PERCENT
		public RuleCall getPERCENTTerminalRuleCall_2() { return cPERCENTTerminalRuleCall_2; }
	}

	public class PostfixExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSymbolRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSymbolAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_0_1_0 = (CrossReference)cSymbolAssignment_0_1.eContents().get(0);
		private final RuleCall cSymbolSymbolIDENTIFIERTerminalRuleCall_0_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_0_1_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Group cGroup_0_2_0 = (Group)cAlternatives_0_2.eContents().get(0);
		private final Action cSymbolRefInvocationSymbolrefAction_0_2_0_0 = (Action)cGroup_0_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2_0_1 = (Keyword)cGroup_0_2_0.eContents().get(1);
		private final Assignment cActualsAssignment_0_2_0_2 = (Assignment)cGroup_0_2_0.eContents().get(2);
		private final RuleCall cActualsExpParserRuleCall_0_2_0_2_0 = (RuleCall)cActualsAssignment_0_2_0_2.eContents().get(0);
		private final Group cGroup_0_2_0_3 = (Group)cGroup_0_2_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_2_0_3_0 = (Keyword)cGroup_0_2_0_3.eContents().get(0);
		private final Assignment cActualsAssignment_0_2_0_3_1 = (Assignment)cGroup_0_2_0_3.eContents().get(1);
		private final RuleCall cActualsExpParserRuleCall_0_2_0_3_1_0 = (RuleCall)cActualsAssignment_0_2_0_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_0_4 = (Keyword)cGroup_0_2_0.eContents().get(4);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Action cSymbolRefMemberSymbolrefAction_0_2_1_0 = (Action)cGroup_0_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2_1_1 = (Keyword)cGroup_0_2_1.eContents().get(1);
		private final Assignment cMemberAssignment_0_2_1_2 = (Assignment)cGroup_0_2_1.eContents().get(2);
		private final Alternatives cMemberAlternatives_0_2_1_2_0 = (Alternatives)cMemberAssignment_0_2_1_2.eContents().get(0);
		private final Keyword cMemberXKeyword_0_2_1_2_0_0 = (Keyword)cMemberAlternatives_0_2_1_2_0.eContents().get(0);
		private final Keyword cMemberYKeyword_0_2_1_2_0_1 = (Keyword)cMemberAlternatives_0_2_1_2_0.eContents().get(1);
		private final Keyword cMemberZKeyword_0_2_1_2_0_2 = (Keyword)cMemberAlternatives_0_2_1_2_0.eContents().get(2);
		private final Keyword cMemberWKeyword_0_2_1_2_0_3 = (Keyword)cMemberAlternatives_0_2_1_2_0.eContents().get(3);
		private final RuleCall cAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PostfixExp returns Exp:
		//	{SymbolRef} symbol=[Symbol|IDENTIFIER] ({SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? (","
		//	actuals+=Exp)* ")" | {SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w"))? | Atomic;
		public ParserRule getRule() { return rule; }

		//{SymbolRef} symbol=[Symbol|IDENTIFIER] ({SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? ("," actuals+=Exp)*
		//")" | {SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w"))? | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SymbolRef} symbol=[Symbol|IDENTIFIER] ({SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? ("," actuals+=Exp)*
		//")" | {SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w"))?
		public Group getGroup_0() { return cGroup_0; }

		//{SymbolRef}
		public Action getSymbolRefAction_0_0() { return cSymbolRefAction_0_0; }

		//symbol=[Symbol|IDENTIFIER]
		public Assignment getSymbolAssignment_0_1() { return cSymbolAssignment_0_1; }

		//[Symbol|IDENTIFIER]
		public CrossReference getSymbolSymbolCrossReference_0_1_0() { return cSymbolSymbolCrossReference_0_1_0; }

		//IDENTIFIER
		public RuleCall getSymbolSymbolIDENTIFIERTerminalRuleCall_0_1_0_1() { return cSymbolSymbolIDENTIFIERTerminalRuleCall_0_1_0_1; }

		//({SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? ("," actuals+=Exp)* ")" |
		//{SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w"))?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }

		//{SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? ("," actuals+=Exp)* ")"
		public Group getGroup_0_2_0() { return cGroup_0_2_0; }

		//{SymbolRefInvocation.symbolref=current}
		public Action getSymbolRefInvocationSymbolrefAction_0_2_0_0() { return cSymbolRefInvocationSymbolrefAction_0_2_0_0; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_0_2_0_1() { return cLeftParenthesisKeyword_0_2_0_1; }

		//actuals+=Exp?
		public Assignment getActualsAssignment_0_2_0_2() { return cActualsAssignment_0_2_0_2; }

		//Exp
		public RuleCall getActualsExpParserRuleCall_0_2_0_2_0() { return cActualsExpParserRuleCall_0_2_0_2_0; }

		//("," actuals+=Exp)*
		public Group getGroup_0_2_0_3() { return cGroup_0_2_0_3; }

		//","
		public Keyword getCommaKeyword_0_2_0_3_0() { return cCommaKeyword_0_2_0_3_0; }

		//actuals+=Exp
		public Assignment getActualsAssignment_0_2_0_3_1() { return cActualsAssignment_0_2_0_3_1; }

		//Exp
		public RuleCall getActualsExpParserRuleCall_0_2_0_3_1_0() { return cActualsExpParserRuleCall_0_2_0_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_0_4() { return cRightParenthesisKeyword_0_2_0_4; }

		//{SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w")
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//{SymbolRefMember.symbolref=current}
		public Action getSymbolRefMemberSymbolrefAction_0_2_1_0() { return cSymbolRefMemberSymbolrefAction_0_2_1_0; }

		//=> "."
		public Keyword getFullStopKeyword_0_2_1_1() { return cFullStopKeyword_0_2_1_1; }

		//member=("x" | "y" | "z" | "w")
		public Assignment getMemberAssignment_0_2_1_2() { return cMemberAssignment_0_2_1_2; }

		//"x" | "y" | "z" | "w"
		public Alternatives getMemberAlternatives_0_2_1_2_0() { return cMemberAlternatives_0_2_1_2_0; }

		//"x"
		public Keyword getMemberXKeyword_0_2_1_2_0_0() { return cMemberXKeyword_0_2_1_2_0_0; }

		//"y"
		public Keyword getMemberYKeyword_0_2_1_2_0_1() { return cMemberYKeyword_0_2_1_2_0_1; }

		//"z"
		public Keyword getMemberZKeyword_0_2_1_2_0_2() { return cMemberZKeyword_0_2_1_2_0_2; }

		//"w"
		public Keyword getMemberWKeyword_0_2_1_2_0_3() { return cMemberWKeyword_0_2_1_2_0_3; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_1() { return cAtomicParserRuleCall_1; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstructorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeComplexTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cParamsAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cParamsExpParserRuleCall_0_3_0_0 = (RuleCall)cParamsAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cParamsExpParserRuleCall_0_3_1_1_0 = (RuleCall)cParamsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntegerLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTCONSTANTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUIntegerLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueUINTCONSTANTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cFloatLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueFLOATCONSTANTTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBoolLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBOOLCONSTANTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cExpParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//Atomic returns Exp:
		//	{Constructor} type=ComplexType "(" (params+=Exp ("," params+=Exp)*)? ")" | {IntegerLiteral} value=INTCONSTANT |
		//	{UIntegerLiteral} value=UINTCONSTANT | {FloatLiteral} value=FLOATCONSTANT | {BoolLiteral} value=BOOLCONSTANT | "(" Exp
		//	")";
		public ParserRule getRule() { return rule; }

		//{Constructor} type=ComplexType "(" (params+=Exp ("," params+=Exp)*)? ")" | {IntegerLiteral} value=INTCONSTANT |
		//{UIntegerLiteral} value=UINTCONSTANT | {FloatLiteral} value=FLOATCONSTANT | {BoolLiteral} value=BOOLCONSTANT | "(" Exp
		//")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Constructor} type=ComplexType "(" (params+=Exp ("," params+=Exp)*)? ")"
		public Group getGroup_0() { return cGroup_0; }

		//{Constructor}
		public Action getConstructorAction_0_0() { return cConstructorAction_0_0; }

		//type=ComplexType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//ComplexType
		public RuleCall getTypeComplexTypeParserRuleCall_0_1_0() { return cTypeComplexTypeParserRuleCall_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }

		//(params+=Exp ("," params+=Exp)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }

		//params+=Exp
		public Assignment getParamsAssignment_0_3_0() { return cParamsAssignment_0_3_0; }

		//Exp
		public RuleCall getParamsExpParserRuleCall_0_3_0_0() { return cParamsExpParserRuleCall_0_3_0_0; }

		//("," params+=Exp)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }

		//params+=Exp
		public Assignment getParamsAssignment_0_3_1_1() { return cParamsAssignment_0_3_1_1; }

		//Exp
		public RuleCall getParamsExpParserRuleCall_0_3_1_1_0() { return cParamsExpParserRuleCall_0_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//{IntegerLiteral} value=INTCONSTANT
		public Group getGroup_1() { return cGroup_1; }

		//{IntegerLiteral}
		public Action getIntegerLiteralAction_1_0() { return cIntegerLiteralAction_1_0; }

		//value=INTCONSTANT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INTCONSTANT
		public RuleCall getValueINTCONSTANTTerminalRuleCall_1_1_0() { return cValueINTCONSTANTTerminalRuleCall_1_1_0; }

		//{UIntegerLiteral} value=UINTCONSTANT
		public Group getGroup_2() { return cGroup_2; }

		//{UIntegerLiteral}
		public Action getUIntegerLiteralAction_2_0() { return cUIntegerLiteralAction_2_0; }

		//value=UINTCONSTANT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//UINTCONSTANT
		public RuleCall getValueUINTCONSTANTTerminalRuleCall_2_1_0() { return cValueUINTCONSTANTTerminalRuleCall_2_1_0; }

		//{FloatLiteral} value=FLOATCONSTANT
		public Group getGroup_3() { return cGroup_3; }

		//{FloatLiteral}
		public Action getFloatLiteralAction_3_0() { return cFloatLiteralAction_3_0; }

		//value=FLOATCONSTANT
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//FLOATCONSTANT
		public RuleCall getValueFLOATCONSTANTTerminalRuleCall_3_1_0() { return cValueFLOATCONSTANTTerminalRuleCall_3_1_0; }

		//{BoolLiteral} value=BOOLCONSTANT
		public Group getGroup_4() { return cGroup_4; }

		//{BoolLiteral}
		public Action getBoolLiteralAction_4_0() { return cBoolLiteralAction_4_0; }

		//value=BOOLCONSTANT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//BOOLCONSTANT
		public RuleCall getValueBOOLCONSTANTTerminalRuleCall_4_1_0() { return cValueBOOLCONSTANTTerminalRuleCall_4_1_0; }

		//"(" Exp ")"
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//Exp
		public RuleCall getExpParserRuleCall_5_1() { return cExpParserRuleCall_5_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}

	public class AbstractDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaredParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDefinition:
		//	Definition | DeclaredParameter;
		public ParserRule getRule() { return rule; }

		//Definition | DeclaredParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//DeclaredParameter
		public RuleCall getDeclaredParameterParserRuleCall_1() { return cDeclaredParameterParserRuleCall_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsDeclaredParameterParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgsDeclaredParameterParserRuleCall_1_2_1_0 = (RuleCall)cArgsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Definition:
		//	name=IDENTIFIER ("(" args+=DeclaredParameter ("," args+=DeclaredParameter)* ")")?;
		public ParserRule getRule() { return rule; }

		//name=IDENTIFIER ("(" args+=DeclaredParameter ("," args+=DeclaredParameter)* ")")?
		public Group getGroup() { return cGroup; }

		//name=IDENTIFIER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0_0() { return cNameIDENTIFIERTerminalRuleCall_0_0; }

		//("(" args+=DeclaredParameter ("," args+=DeclaredParameter)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//args+=DeclaredParameter
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//DeclaredParameter
		public RuleCall getArgsDeclaredParameterParserRuleCall_1_1_0() { return cArgsDeclaredParameterParserRuleCall_1_1_0; }

		//("," args+=DeclaredParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//args+=DeclaredParameter
		public Assignment getArgsAssignment_1_2_1() { return cArgsAssignment_1_2_1; }

		//DeclaredParameter
		public RuleCall getArgsDeclaredParameterParserRuleCall_1_2_1_0() { return cArgsDeclaredParameterParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class DeclaredParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDENTIFIERTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DeclaredParameter:
		//	name=IDENTIFIER;
		public ParserRule getRule() { return rule; }

		//name=IDENTIFIER
		public Assignment getNameAssignment() { return cNameAssignment; }

		//IDENTIFIER
		public RuleCall getNameIDENTIFIERTerminalRuleCall_0() { return cNameIDENTIFIERTerminalRuleCall_0; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final RuleCall cSEMICOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Evaluation:
		//	expression=Exp SEMICOLON;
		public ParserRule getRule() { return rule; }

		//expression=Exp SEMICOLON
		public Group getGroup() { return cGroup; }

		//expression=Exp
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Exp
		public RuleCall getExpressionExpParserRuleCall_0_0() { return cExpressionExpParserRuleCall_0_0; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1() { return cSEMICOLONTerminalRuleCall_1; }
	}
	
	
	public class LogicOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_0_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_1_0 = (Keyword)cEQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSERLessThanSignKeyword_2_0 = (Keyword)cLESSEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATERGreaterThanSignKeyword_3_0 = (Keyword)cGREATEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESSER_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESSER_EQUALLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLESSER_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATER_EQUALGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGREATER_EQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum LogicOp:
		//	NOT_EQUAL="!=" | EQUAL="==" | LESSER="<" | GREATER=">" | LESSER_EQUAL="<=" | GREATER_EQUAL=">=";
		public EnumRule getRule() { return rule; }

		//NOT_EQUAL="!=" | EQUAL="==" | LESSER="<" | GREATER=">" | LESSER_EQUAL="<=" | GREATER_EQUAL=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//NOT_EQUAL="!="
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_0() { return cNOT_EQUALEnumLiteralDeclaration_0; }

		//"!="
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_0_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_0_0; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_1() { return cEQUALEnumLiteralDeclaration_1; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_1_0() { return cEQUALEqualsSignEqualsSignKeyword_1_0; }

		//LESSER="<"
		public EnumLiteralDeclaration getLESSEREnumLiteralDeclaration_2() { return cLESSEREnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLESSERLessThanSignKeyword_2_0() { return cLESSERLessThanSignKeyword_2_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_3() { return cGREATEREnumLiteralDeclaration_3; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_3_0() { return cGREATERGreaterThanSignKeyword_3_0; }

		//LESSER_EQUAL="<="
		public EnumLiteralDeclaration getLESSER_EQUALEnumLiteralDeclaration_4() { return cLESSER_EQUALEnumLiteralDeclaration_4; }

		//"<="
		public Keyword getLESSER_EQUALLessThanSignEqualsSignKeyword_4_0() { return cLESSER_EQUALLessThanSignEqualsSignKeyword_4_0; }

		//GREATER_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_EQUALEnumLiteralDeclaration_5() { return cGREATER_EQUALEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGREATER_EQUALGreaterThanSignEqualsSignKeyword_5_0() { return cGREATER_EQUALGreaterThanSignEqualsSignKeyword_5_0; }
	}
	
	private SourceFileElements pSourceFile;
	private TerminalRule tATTRIBUTE;
	private TerminalRule tCONST;
	private TerminalRule tBOOL;
	private TerminalRule tFLOAT;
	private TerminalRule tINTX;
	private TerminalRule tUINT;
	private TerminalRule tBREAK;
	private TerminalRule tCONTINUE;
	private TerminalRule tDO;
	private TerminalRule tELSE;
	private TerminalRule tFOR;
	private TerminalRule tIF;
	private TerminalRule tDISCARD;
	private TerminalRule tRETURN;
	private TerminalRule tSWITCH;
	private TerminalRule tCASE;
	private TerminalRule tDEFAULT;
	private TerminalRule tBVEC2;
	private TerminalRule tBVEC3;
	private TerminalRule tBVEC4;
	private TerminalRule tIVEC2;
	private TerminalRule tIVEC3;
	private TerminalRule tIVEC4;
	private TerminalRule tUVEC2;
	private TerminalRule tUVEC3;
	private TerminalRule tUVEC4;
	private TerminalRule tVEC2;
	private TerminalRule tVEC3;
	private TerminalRule tVEC4;
	private TerminalRule tMAT2;
	private TerminalRule tMAT3;
	private TerminalRule tMAT4;
	private TerminalRule tCENTROID;
	private TerminalRule tIN;
	private TerminalRule tOUT;
	private TerminalRule tINOUT;
	private TerminalRule tUNIFORM;
	private TerminalRule tVARYING;
	private TerminalRule tNOPERSPECTIVE;
	private TerminalRule tFLAT;
	private TerminalRule tSMOOTH;
	private TerminalRule tLAYOUT;
	private TerminalRule tMAT2X2;
	private TerminalRule tMAT2X3;
	private TerminalRule tMAT2X4;
	private TerminalRule tMAT3X2;
	private TerminalRule tMAT3X3;
	private TerminalRule tMAT3X4;
	private TerminalRule tMAT4X2;
	private TerminalRule tMAT4X3;
	private TerminalRule tMAT4X4;
	private TerminalRule tSTRUCT;
	private TerminalRule tVOID;
	private TerminalRule tWHILE;
	private TerminalRule tTYPE_NAME;
	private TerminalRule tFLOATCONSTANT;
	private TerminalRule tINTCONSTANT;
	private TerminalRule tUINTCONSTANT;
	private TerminalRule tBOOLCONSTANT;
	private TerminalRule tFIELD_SELECTION;
	private TerminalRule tLEFT_OP;
	private TerminalRule tRIGHT_OP;
	private TerminalRule tINC_OP;
	private TerminalRule tDEC_OP;
	private TerminalRule tAND_OP;
	private TerminalRule tOR_OP;
	private TerminalRule tXOR_OP;
	private TerminalRule tMUL_ASSIGN;
	private TerminalRule tDIV_ASSIGN;
	private TerminalRule tADD_ASSIGN;
	private TerminalRule tMOD_ASSIGN;
	private TerminalRule tLEFT_ASSIGN;
	private TerminalRule tRIGHT_ASSIGN;
	private TerminalRule tAND_ASSIGN;
	private TerminalRule tXOR_ASSIGN;
	private TerminalRule tOR_ASSIGN;
	private TerminalRule tSUB_ASSIGN;
	private TerminalRule tLEFT_BRACKET;
	private TerminalRule tRIGHT_BRACKET;
	private TerminalRule tLEFT_BRACE;
	private TerminalRule tRIGHT_BRACE;
	private TerminalRule tCOLON;
	private TerminalRule tSEMICOLON;
	private TerminalRule tBANG;
	private TerminalRule tPLUS;
	private TerminalRule tDASH;
	private TerminalRule tTILDE;
	private TerminalRule tSTAR;
	private TerminalRule tSLASH;
	private TerminalRule tPERCENT;
	private TerminalRule tVERTICAL_BAR;
	private TerminalRule tCARET;
	private TerminalRule tAMPERSAND;
	private TerminalRule tQUESTION;
	private TerminalRule tINVARIANT;
	private TerminalRule tHIGH_PRECISION;
	private TerminalRule tMEDIUM_PRECISION;
	private TerminalRule tLOW_PRECISION;
	private TerminalRule tPRECISION;
	private TerminalRule tIDENTIFIER;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tPRECOMPILER_STATEMENT;
	private TerminalRule tNL;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	private PrecompilerStatementElements pPrecompilerStatement;
	private PrecompilerVersionElements pPrecompilerVersion;
	private DeclarationElements pDeclaration;
	private GlobalDeclarationElements pGlobalDeclaration;
	private LocalDeclarationElements pLocalDeclaration;
	private UniformDeclarationElements pUniformDeclaration;
	private AttributeDeclarationElements pAttributeDeclaration;
	private FunctionPrototypeElements pFunctionPrototype;
	private ParameterElements pParameter;
	private TypeElements pType;
	private ScalarTypeElements pScalarType;
	private ComplexTypeElements pComplexType;
	private VecTypeElements pVecType;
	private MatTypeElements pMatType;
	private FunctionDefinitionElements pFunctionDefinition;
	private FunctionCallElements pFunctionCall;
	private StatementElements pStatement;
	private SwitchCaseElements pSwitchCase;
	private BlockStatementElements pBlockStatement;
	private JumpStatementElements pJumpStatement;
	private VariableDeclarationElements pVariableDeclaration;
	private AssignmentStatementElements pAssignmentStatement;
	private ExpElements pExp;
	private LogicExpElements pLogicExp;
	private LogicOpElements unknownRuleLogicOp;
	private AddExpElements pAddExp;
	private AddOpElements pAddOp;
	private MulExpElements pMulExp;
	private MulOpElements pMulOp;
	private PostfixExpElements pPostfixExp;
	private AtomicElements pAtomic;
	private AbstractDefinitionElements pAbstractDefinition;
	private DefinitionElements pDefinition;
	private DeclaredParameterElements pDeclaredParameter;
	private EvaluationElements pEvaluation;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public GlslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//SourceFile:
	//	pre+=PrecompilerStatement* (uniforms+=UniformDeclaration SEMICOLON | attribs+=AttributeDeclaration SEMICOLON |
	//	prototypes+=FunctionPrototype SEMICOLON | functions+=FunctionDefinition | variables+=VariableDeclaration SEMICOLON)*;
	public SourceFileElements getSourceFileAccess() {
		return (pSourceFile != null) ? pSourceFile : (pSourceFile = new SourceFileElements());
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}

	//terminal ATTRIBUTE:
	//	"attribute";
	public TerminalRule getATTRIBUTERule() {
		return (tATTRIBUTE != null) ? tATTRIBUTE : (tATTRIBUTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ATTRIBUTE"));
	} 

	//terminal CONST:
	//	"const";
	public TerminalRule getCONSTRule() {
		return (tCONST != null) ? tCONST : (tCONST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONST"));
	} 

	//terminal BOOL:
	//	"bool";
	public TerminalRule getBOOLRule() {
		return (tBOOL != null) ? tBOOL : (tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL"));
	} 

	//terminal FLOAT:
	//	"float";
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal INTX:
	//	"int";
	public TerminalRule getINTXRule() {
		return (tINTX != null) ? tINTX : (tINTX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTX"));
	} 

	//terminal UINT:
	//	"uint";
	public TerminalRule getUINTRule() {
		return (tUINT != null) ? tUINT : (tUINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UINT"));
	} 

	//terminal BREAK:
	//	"break";
	public TerminalRule getBREAKRule() {
		return (tBREAK != null) ? tBREAK : (tBREAK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BREAK"));
	} 

	//terminal CONTINUE:
	//	"continue";
	public TerminalRule getCONTINUERule() {
		return (tCONTINUE != null) ? tCONTINUE : (tCONTINUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CONTINUE"));
	} 

	//terminal DO:
	//	"do";
	public TerminalRule getDORule() {
		return (tDO != null) ? tDO : (tDO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DO"));
	} 

	//terminal ELSE:
	//	"else";
	public TerminalRule getELSERule() {
		return (tELSE != null) ? tELSE : (tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ELSE"));
	} 

	//terminal FOR:
	//	"for";
	public TerminalRule getFORRule() {
		return (tFOR != null) ? tFOR : (tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FOR"));
	} 

	//terminal IF:
	//	"if";
	public TerminalRule getIFRule() {
		return (tIF != null) ? tIF : (tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IF"));
	} 

	//terminal DISCARD:
	//	"discard";
	public TerminalRule getDISCARDRule() {
		return (tDISCARD != null) ? tDISCARD : (tDISCARD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DISCARD"));
	} 

	//terminal RETURN:
	//	"return";
	public TerminalRule getRETURNRule() {
		return (tRETURN != null) ? tRETURN : (tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RETURN"));
	} 

	//terminal SWITCH:
	//	"switch";
	public TerminalRule getSWITCHRule() {
		return (tSWITCH != null) ? tSWITCH : (tSWITCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SWITCH"));
	} 

	//terminal CASE:
	//	"case";
	public TerminalRule getCASERule() {
		return (tCASE != null) ? tCASE : (tCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CASE"));
	} 

	//terminal DEFAULT:
	//	"default";
	public TerminalRule getDEFAULTRule() {
		return (tDEFAULT != null) ? tDEFAULT : (tDEFAULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEFAULT"));
	} 

	//terminal BVEC2:
	//	"bvec2";
	public TerminalRule getBVEC2Rule() {
		return (tBVEC2 != null) ? tBVEC2 : (tBVEC2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BVEC2"));
	} 

	//terminal BVEC3:
	//	"bvec3";
	public TerminalRule getBVEC3Rule() {
		return (tBVEC3 != null) ? tBVEC3 : (tBVEC3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BVEC3"));
	} 

	//terminal BVEC4:
	//	"bvec4";
	public TerminalRule getBVEC4Rule() {
		return (tBVEC4 != null) ? tBVEC4 : (tBVEC4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BVEC4"));
	} 

	//terminal IVEC2:
	//	"ivec2";
	public TerminalRule getIVEC2Rule() {
		return (tIVEC2 != null) ? tIVEC2 : (tIVEC2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IVEC2"));
	} 

	//terminal IVEC3:
	//	"ivec3";
	public TerminalRule getIVEC3Rule() {
		return (tIVEC3 != null) ? tIVEC3 : (tIVEC3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IVEC3"));
	} 

	//terminal IVEC4:
	//	"ivec4";
	public TerminalRule getIVEC4Rule() {
		return (tIVEC4 != null) ? tIVEC4 : (tIVEC4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IVEC4"));
	} 

	//terminal UVEC2:
	//	"uvec2";
	public TerminalRule getUVEC2Rule() {
		return (tUVEC2 != null) ? tUVEC2 : (tUVEC2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UVEC2"));
	} 

	//terminal UVEC3:
	//	"uvec3";
	public TerminalRule getUVEC3Rule() {
		return (tUVEC3 != null) ? tUVEC3 : (tUVEC3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UVEC3"));
	} 

	//terminal UVEC4:
	//	"uvec4";
	public TerminalRule getUVEC4Rule() {
		return (tUVEC4 != null) ? tUVEC4 : (tUVEC4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UVEC4"));
	} 

	//terminal VEC2:
	//	"vec2";
	public TerminalRule getVEC2Rule() {
		return (tVEC2 != null) ? tVEC2 : (tVEC2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VEC2"));
	} 

	//terminal VEC3:
	//	"vec3";
	public TerminalRule getVEC3Rule() {
		return (tVEC3 != null) ? tVEC3 : (tVEC3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VEC3"));
	} 

	//terminal VEC4:
	//	"vec4";
	public TerminalRule getVEC4Rule() {
		return (tVEC4 != null) ? tVEC4 : (tVEC4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VEC4"));
	} 

	//terminal MAT2:
	//	"mat2";
	public TerminalRule getMAT2Rule() {
		return (tMAT2 != null) ? tMAT2 : (tMAT2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT2"));
	} 

	//terminal MAT3:
	//	"mat3";
	public TerminalRule getMAT3Rule() {
		return (tMAT3 != null) ? tMAT3 : (tMAT3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT3"));
	} 

	//terminal MAT4:
	//	"mat4";
	public TerminalRule getMAT4Rule() {
		return (tMAT4 != null) ? tMAT4 : (tMAT4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT4"));
	} 

	//terminal CENTROID:
	//	"centroid";
	public TerminalRule getCENTROIDRule() {
		return (tCENTROID != null) ? tCENTROID : (tCENTROID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CENTROID"));
	} 

	//terminal IN:
	//	"in";
	public TerminalRule getINRule() {
		return (tIN != null) ? tIN : (tIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IN"));
	} 

	//terminal OUT:
	//	"out";
	public TerminalRule getOUTRule() {
		return (tOUT != null) ? tOUT : (tOUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OUT"));
	} 

	//terminal INOUT:
	//	"inout";
	public TerminalRule getINOUTRule() {
		return (tINOUT != null) ? tINOUT : (tINOUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INOUT"));
	} 

	//terminal UNIFORM:
	//	"uniform";
	public TerminalRule getUNIFORMRule() {
		return (tUNIFORM != null) ? tUNIFORM : (tUNIFORM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNIFORM"));
	} 

	//terminal VARYING:
	//	"varying";
	public TerminalRule getVARYINGRule() {
		return (tVARYING != null) ? tVARYING : (tVARYING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VARYING"));
	} 

	//terminal NOPERSPECTIVE:
	//	"noperspective";
	public TerminalRule getNOPERSPECTIVERule() {
		return (tNOPERSPECTIVE != null) ? tNOPERSPECTIVE : (tNOPERSPECTIVE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOPERSPECTIVE"));
	} 

	//terminal FLAT:
	//	"flat";
	public TerminalRule getFLATRule() {
		return (tFLAT != null) ? tFLAT : (tFLAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLAT"));
	} 

	//terminal SMOOTH:
	//	"smooth";
	public TerminalRule getSMOOTHRule() {
		return (tSMOOTH != null) ? tSMOOTH : (tSMOOTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SMOOTH"));
	} 

	//terminal LAYOUT:
	//	"layout";
	public TerminalRule getLAYOUTRule() {
		return (tLAYOUT != null) ? tLAYOUT : (tLAYOUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LAYOUT"));
	} 

	//terminal MAT2X2:
	//	"mat2x2";
	public TerminalRule getMAT2X2Rule() {
		return (tMAT2X2 != null) ? tMAT2X2 : (tMAT2X2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT2X2"));
	} 

	//terminal MAT2X3:
	//	"mat2x3";
	public TerminalRule getMAT2X3Rule() {
		return (tMAT2X3 != null) ? tMAT2X3 : (tMAT2X3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT2X3"));
	} 

	//terminal MAT2X4:
	//	"mat2x4";
	public TerminalRule getMAT2X4Rule() {
		return (tMAT2X4 != null) ? tMAT2X4 : (tMAT2X4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT2X4"));
	} 

	//terminal MAT3X2:
	//	"mat3x2";
	public TerminalRule getMAT3X2Rule() {
		return (tMAT3X2 != null) ? tMAT3X2 : (tMAT3X2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT3X2"));
	} 

	//terminal MAT3X3:
	//	"mat3x3";
	public TerminalRule getMAT3X3Rule() {
		return (tMAT3X3 != null) ? tMAT3X3 : (tMAT3X3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT3X3"));
	} 

	//terminal MAT3X4:
	//	"mat3x4";
	public TerminalRule getMAT3X4Rule() {
		return (tMAT3X4 != null) ? tMAT3X4 : (tMAT3X4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT3X4"));
	} 

	//terminal MAT4X2:
	//	"mat4x2";
	public TerminalRule getMAT4X2Rule() {
		return (tMAT4X2 != null) ? tMAT4X2 : (tMAT4X2 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT4X2"));
	} 

	//terminal MAT4X3:
	//	"mat4x3";
	public TerminalRule getMAT4X3Rule() {
		return (tMAT4X3 != null) ? tMAT4X3 : (tMAT4X3 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT4X3"));
	} 

	//terminal MAT4X4:
	//	"mat4x4";
	public TerminalRule getMAT4X4Rule() {
		return (tMAT4X4 != null) ? tMAT4X4 : (tMAT4X4 = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MAT4X4"));
	} 

	//// TODO lots of data types
	////SAMPLER1D SAMPLER2D SAMPLER3D SAMPLERCUBE SAMPLER1DSHADOW SAMPLER2DSHADOW
	////SAMPLERCUBESHADOW SAMPLER1DARRAY SAMPLER2DARRAY SAMPLER1DARRAYSHADOW
	////SAMPLER2DARRAYSHADOW ISAMPLER1D ISAMPLER2D ISAMPLER3D ISAMPLERCUBE
	////ISAMPLER1DARRAY ISAMPLER2DARRAY USAMPLER1D USAMPLER2D USAMPLER3D
	////USAMPLERCUBE USAMPLER1DARRAY USAMPLER2DARRAY
	////SAMPLER2DRECT SAMPLER2DRECTSHADOW ISAMPLER2DRECT USAMPLER2DRECT
	////SAMPLERBUFFER ISAMPLERBUFFER USAMPLERBUFFER
	////SAMPLER2DMS ISAMPLER2DMS USAMPLER2DMS
	////SAMPLER2DMSArray ISAMPLER2DMSArray USAMPLER2DMSArray
	////
	//terminal STRUCT:
	//	"struct";
	public TerminalRule getSTRUCTRule() {
		return (tSTRUCT != null) ? tSTRUCT : (tSTRUCT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRUCT"));
	} 

	//terminal VOID:
	//	"void";
	public TerminalRule getVOIDRule() {
		return (tVOID != null) ? tVOID : (tVOID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VOID"));
	} 

	//terminal WHILE:
	//	"while";
	public TerminalRule getWHILERule() {
		return (tWHILE != null) ? tWHILE : (tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHILE"));
	} 

	//terminal TYPE_NAME:
	//	"WTF IS THIS?";
	public TerminalRule getTYPE_NAMERule() {
		return (tTYPE_NAME != null) ? tTYPE_NAME : (tTYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TYPE_NAME"));
	} 

	//terminal FLOATCONSTANT returns ecore::EBigDecimal:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getFLOATCONSTANTRule() {
		return (tFLOATCONSTANT != null) ? tFLOATCONSTANT : (tFLOATCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATCONSTANT"));
	} 

	//terminal INTCONSTANT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTCONSTANTRule() {
		return (tINTCONSTANT != null) ? tINTCONSTANT : (tINTCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTCONSTANT"));
	} 

	//terminal UINTCONSTANT returns ecore::EInt:
	//	"0".."9"+ ("u" | "U");
	public TerminalRule getUINTCONSTANTRule() {
		return (tUINTCONSTANT != null) ? tUINTCONSTANT : (tUINTCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UINTCONSTANT"));
	} 

	//terminal BOOLCONSTANT returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLCONSTANTRule() {
		return (tBOOLCONSTANT != null) ? tBOOLCONSTANT : (tBOOLCONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLCONSTANT"));
	} 

	//terminal FIELD_SELECTION:
	//	"what is this?";
	public TerminalRule getFIELD_SELECTIONRule() {
		return (tFIELD_SELECTION != null) ? tFIELD_SELECTION : (tFIELD_SELECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FIELD_SELECTION"));
	} 

	//terminal LEFT_OP:
	//	"<<";
	public TerminalRule getLEFT_OPRule() {
		return (tLEFT_OP != null) ? tLEFT_OP : (tLEFT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_OP"));
	} 

	//terminal RIGHT_OP:
	//	">>";
	public TerminalRule getRIGHT_OPRule() {
		return (tRIGHT_OP != null) ? tRIGHT_OP : (tRIGHT_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_OP"));
	} 

	//terminal INC_OP:
	//	"++";
	public TerminalRule getINC_OPRule() {
		return (tINC_OP != null) ? tINC_OP : (tINC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INC_OP"));
	} 

	//terminal DEC_OP:
	//	"--";
	public TerminalRule getDEC_OPRule() {
		return (tDEC_OP != null) ? tDEC_OP : (tDEC_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DEC_OP"));
	} 

	////terminal LE_OP: '<=';
	////terminal GE_OP: '>=';
	////terminal EQ_OP: '==';
	////terminal NE_OP: '!=';
	//terminal AND_OP:
	//	"&&";
	public TerminalRule getAND_OPRule() {
		return (tAND_OP != null) ? tAND_OP : (tAND_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND_OP"));
	} 

	//terminal OR_OP:
	//	"||";
	public TerminalRule getOR_OPRule() {
		return (tOR_OP != null) ? tOR_OP : (tOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR_OP"));
	} 

	//// XOR_OP VS CARET =?
	//terminal XOR_OP:
	//	"^???";
	public TerminalRule getXOR_OPRule() {
		return (tXOR_OP != null) ? tXOR_OP : (tXOR_OP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XOR_OP"));
	} 

	//terminal MUL_ASSIGN:
	//	"*=";
	public TerminalRule getMUL_ASSIGNRule() {
		return (tMUL_ASSIGN != null) ? tMUL_ASSIGN : (tMUL_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MUL_ASSIGN"));
	} 

	//terminal DIV_ASSIGN:
	//	"/=";
	public TerminalRule getDIV_ASSIGNRule() {
		return (tDIV_ASSIGN != null) ? tDIV_ASSIGN : (tDIV_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIV_ASSIGN"));
	} 

	//terminal ADD_ASSIGN:
	//	"+=";
	public TerminalRule getADD_ASSIGNRule() {
		return (tADD_ASSIGN != null) ? tADD_ASSIGN : (tADD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ADD_ASSIGN"));
	} 

	//terminal MOD_ASSIGN:
	//	"%=";
	public TerminalRule getMOD_ASSIGNRule() {
		return (tMOD_ASSIGN != null) ? tMOD_ASSIGN : (tMOD_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOD_ASSIGN"));
	} 

	//terminal LEFT_ASSIGN:
	//	"??";
	public TerminalRule getLEFT_ASSIGNRule() {
		return (tLEFT_ASSIGN != null) ? tLEFT_ASSIGN : (tLEFT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_ASSIGN"));
	} 

	//terminal RIGHT_ASSIGN:
	//	"??ASDF";
	public TerminalRule getRIGHT_ASSIGNRule() {
		return (tRIGHT_ASSIGN != null) ? tRIGHT_ASSIGN : (tRIGHT_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_ASSIGN"));
	} 

	//terminal AND_ASSIGN:
	//	"&=";
	public TerminalRule getAND_ASSIGNRule() {
		return (tAND_ASSIGN != null) ? tAND_ASSIGN : (tAND_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AND_ASSIGN"));
	} 

	//terminal XOR_ASSIGN:
	//	"^=";
	public TerminalRule getXOR_ASSIGNRule() {
		return (tXOR_ASSIGN != null) ? tXOR_ASSIGN : (tXOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "XOR_ASSIGN"));
	} 

	//terminal OR_ASSIGN:
	//	"|=";
	public TerminalRule getOR_ASSIGNRule() {
		return (tOR_ASSIGN != null) ? tOR_ASSIGN : (tOR_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OR_ASSIGN"));
	} 

	//terminal SUB_ASSIGN:
	//	"-=";
	public TerminalRule getSUB_ASSIGNRule() {
		return (tSUB_ASSIGN != null) ? tSUB_ASSIGN : (tSUB_ASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SUB_ASSIGN"));
	} 

	////terminal LEFT_PAREN: '(';
	////terminal RIGHT_PAREN: ')';
	//terminal LEFT_BRACKET:
	//	"[";
	public TerminalRule getLEFT_BRACKETRule() {
		return (tLEFT_BRACKET != null) ? tLEFT_BRACKET : (tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_BRACKET"));
	} 

	//terminal RIGHT_BRACKET:
	//	"]";
	public TerminalRule getRIGHT_BRACKETRule() {
		return (tRIGHT_BRACKET != null) ? tRIGHT_BRACKET : (tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_BRACKET"));
	} 

	//terminal LEFT_BRACE:
	//	"{";
	public TerminalRule getLEFT_BRACERule() {
		return (tLEFT_BRACE != null) ? tLEFT_BRACE : (tLEFT_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LEFT_BRACE"));
	} 

	//terminal RIGHT_BRACE:
	//	"}";
	public TerminalRule getRIGHT_BRACERule() {
		return (tRIGHT_BRACE != null) ? tRIGHT_BRACE : (tRIGHT_BRACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RIGHT_BRACE"));
	} 

	////terminal COMMA: ',';
	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	////terminal EQUAL: '=';
	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal BANG:
	//	"!";
	public TerminalRule getBANGRule() {
		return (tBANG != null) ? tBANG : (tBANG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BANG"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal DASH:
	//	"-";
	public TerminalRule getDASHRule() {
		return (tDASH != null) ? tDASH : (tDASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DASH"));
	} 

	//terminal TILDE:
	//	"~";
	public TerminalRule getTILDERule() {
		return (tTILDE != null) ? tTILDE : (tTILDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TILDE"));
	} 

	//terminal STAR:
	//	"*";
	public TerminalRule getSTARRule() {
		return (tSTAR != null) ? tSTAR : (tSTAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STAR"));
	} 

	//terminal SLASH:
	//	"/";
	public TerminalRule getSLASHRule() {
		return (tSLASH != null) ? tSLASH : (tSLASH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SLASH"));
	} 

	//terminal PERCENT:
	//	"%";
	public TerminalRule getPERCENTRule() {
		return (tPERCENT != null) ? tPERCENT : (tPERCENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT"));
	} 

	////terminal LEFT_ANGLE: '<';
	////terminal RIGHT_ANGLE: '>';
	//terminal VERTICAL_BAR:
	//	"|";
	public TerminalRule getVERTICAL_BARRule() {
		return (tVERTICAL_BAR != null) ? tVERTICAL_BAR : (tVERTICAL_BAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VERTICAL_BAR"));
	} 

	//terminal CARET:
	//	"^";
	public TerminalRule getCARETRule() {
		return (tCARET != null) ? tCARET : (tCARET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CARET"));
	} 

	//terminal AMPERSAND:
	//	"&";
	public TerminalRule getAMPERSANDRule() {
		return (tAMPERSAND != null) ? tAMPERSAND : (tAMPERSAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "AMPERSAND"));
	} 

	//terminal QUESTION:
	//	"?";
	public TerminalRule getQUESTIONRule() {
		return (tQUESTION != null) ? tQUESTION : (tQUESTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUESTION"));
	} 

	//terminal INVARIANT:
	//	"invariant";
	public TerminalRule getINVARIANTRule() {
		return (tINVARIANT != null) ? tINVARIANT : (tINVARIANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INVARIANT"));
	} 

	//terminal HIGH_PRECISION:
	//	"high";
	public TerminalRule getHIGH_PRECISIONRule() {
		return (tHIGH_PRECISION != null) ? tHIGH_PRECISION : (tHIGH_PRECISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HIGH_PRECISION"));
	} 

	//terminal MEDIUM_PRECISION:
	//	"medium";
	public TerminalRule getMEDIUM_PRECISIONRule() {
		return (tMEDIUM_PRECISION != null) ? tMEDIUM_PRECISION : (tMEDIUM_PRECISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MEDIUM_PRECISION"));
	} 

	//terminal LOW_PRECISION:
	//	"low";
	public TerminalRule getLOW_PRECISIONRule() {
		return (tLOW_PRECISION != null) ? tLOW_PRECISION : (tLOW_PRECISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LOW_PRECISION"));
	} 

	//terminal PRECISION:
	//	"precision";
	public TerminalRule getPRECISIONRule() {
		return (tPRECISION != null) ? tPRECISION : (tPRECISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRECISION"));
	} 

	//terminal IDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDENTIFIERRule() {
		return (tIDENTIFIER != null) ? tIDENTIFIER : (tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal PRECOMPILER_STATEMENT:
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getPRECOMPILER_STATEMENTRule() {
		return (tPRECOMPILER_STATEMENT != null) ? tPRECOMPILER_STATEMENT : (tPRECOMPILER_STATEMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PRECOMPILER_STATEMENT"));
	} 

	//terminal NL:
	//	"\r"? "\n";
	public TerminalRule getNLRule() {
		return (tNL != null) ? tNL : (tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NL"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 

	//PrecompilerStatement:
	//	PrecompilerVersion;
	public PrecompilerStatementElements getPrecompilerStatementAccess() {
		return (pPrecompilerStatement != null) ? pPrecompilerStatement : (pPrecompilerStatement = new PrecompilerStatementElements());
	}
	
	public ParserRule getPrecompilerStatementRule() {
		return getPrecompilerStatementAccess().getRule();
	}

	//PrecompilerVersion:
	//	"#version" version=INTCONSTANT profile=IDENTIFIER?;
	public PrecompilerVersionElements getPrecompilerVersionAccess() {
		return (pPrecompilerVersion != null) ? pPrecompilerVersion : (pPrecompilerVersion = new PrecompilerVersionElements());
	}
	
	public ParserRule getPrecompilerVersionRule() {
		return getPrecompilerVersionAccess().getRule();
	}

	////	GlobalDeclaration |
	////	LocalDeclaration
	//Declaration returns Symbol:
	//	UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
	//	FunctionDefinition;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//GlobalDeclaration returns Symbol:
	//	UniformDeclaration SEMICOLON | AttributeDeclaration SEMICOLON | FunctionPrototype SEMICOLON | VariableDeclaration |
	//	FunctionDefinition;
	public GlobalDeclarationElements getGlobalDeclarationAccess() {
		return (pGlobalDeclaration != null) ? pGlobalDeclaration : (pGlobalDeclaration = new GlobalDeclarationElements());
	}
	
	public ParserRule getGlobalDeclarationRule() {
		return getGlobalDeclarationAccess().getRule();
	}

	//LocalDeclaration returns Symbol:
	//	VariableDeclaration;
	public LocalDeclarationElements getLocalDeclarationAccess() {
		return (pLocalDeclaration != null) ? pLocalDeclaration : (pLocalDeclaration = new LocalDeclarationElements());
	}
	
	public ParserRule getLocalDeclarationRule() {
		return getLocalDeclarationAccess().getRule();
	}

	//UniformDeclaration returns Symbol:
	//	{UniformDeclaration} qualifier=UNIFORM type=Type name=IDENTIFIER;
	public UniformDeclarationElements getUniformDeclarationAccess() {
		return (pUniformDeclaration != null) ? pUniformDeclaration : (pUniformDeclaration = new UniformDeclarationElements());
	}
	
	public ParserRule getUniformDeclarationRule() {
		return getUniformDeclarationAccess().getRule();
	}

	//AttributeDeclaration returns Symbol:
	//	{InAttributeDeclaration} qualifier=IN type=Type name=IDENTIFIER | {OutAttributeDeclaration} qualifier=OUT type=Type
	//	name=IDENTIFIER | {InOutAttributeDeclaration} qualifier=INOUT type=Type name=IDENTIFIER;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return (pAttributeDeclaration != null) ? pAttributeDeclaration : (pAttributeDeclaration = new AttributeDeclarationElements());
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}

	//FunctionPrototype:
	//	type=Type name=IDENTIFIER "(" (VOID? | params+=Parameter ("," params+=Parameter)*) ")";
	public FunctionPrototypeElements getFunctionPrototypeAccess() {
		return (pFunctionPrototype != null) ? pFunctionPrototype : (pFunctionPrototype = new FunctionPrototypeElements());
	}
	
	public ParserRule getFunctionPrototypeRule() {
		return getFunctionPrototypeAccess().getRule();
	}

	//Parameter:
	//	type=Type name=IDENTIFIER;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Type:
	//	ScalarType | ComplexType | {VoidType} name=VOID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//ScalarType:
	//	{IntType} name=INTX | {UIntType} name=UINT | {BoolType} name=BOOL | {FloatType} name=FLOAT;
	public ScalarTypeElements getScalarTypeAccess() {
		return (pScalarType != null) ? pScalarType : (pScalarType = new ScalarTypeElements());
	}
	
	public ParserRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	//ComplexType:
	//	VecType | MatType;
	public ComplexTypeElements getComplexTypeAccess() {
		return (pComplexType != null) ? pComplexType : (pComplexType = new ComplexTypeElements());
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//VecType:
	//	{Vec2Type} name=VEC2 | {Vec3Type} name=VEC3 | {Vec4Type} name=VEC4 | {IVec2Type} name=IVEC2 | {IVec3Type} name=IVEC3 |
	//	{IVec4Type} name=IVEC4 | {UVec2Type} name=UVEC2 | {UVec3Type} name=UVEC3 | {UVec4Type} name=UVEC4 | {BVec2Type}
	//	name=BVEC2 | {BVec3Type} name=BVEC3 | {BVec4Type} name=BVEC4;
	public VecTypeElements getVecTypeAccess() {
		return (pVecType != null) ? pVecType : (pVecType = new VecTypeElements());
	}
	
	public ParserRule getVecTypeRule() {
		return getVecTypeAccess().getRule();
	}

	//MatType:
	//	{Mat2Type} name=MAT2 | {Mat3Type} name=MAT3 | {Mat4Type} name=MAT4 | {Mat2x2Type} name=MAT2X2 | {Mat2x3Type}
	//	name=MAT2X3 | {Mat2x4Type} name=MAT2X4 | {Mat3x2Type} name=MAT3X2 | {Mat3x3Type} name=MAT3X3 | {Mat3x4Type}
	//	name=MAT3X4 | {Mat4x2Type} name=MAT4X2 | {Mat4x3Type} name=MAT4X3 | {Mat4x4Type} name=MAT4X4;
	public MatTypeElements getMatTypeAccess() {
		return (pMatType != null) ? pMatType : (pMatType = new MatTypeElements());
	}
	
	public ParserRule getMatTypeRule() {
		return getMatTypeAccess().getRule();
	}

	//FunctionDefinition:
	//	FunctionPrototype LEFT_BRACE statements+=Statement* RIGHT_BRACE;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//FunctionCall:
	//	name="function" func=[FunctionDefinition|IDENTIFIER] "(" (args+=Exp ("," args+=Exp)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//Statement:
	//	BlockStatement | VariableDeclaration | AssignmentStatement | JumpStatement | {SymbolRef} symbol=[Symbol|IDENTIFIER]
	//	("(" actuals+=Exp? ("," actuals+=Exp)* ")")? SEMICOLON | {IfStatement} IF "(" condition=Exp ")" then=Statement (ELSE
	//	else=Statement)? | {WhileStatement} WHILE "(" condition=Exp ")" do=Statement | {WhileStatement} DO do=BlockStatement
	//	WHILE "(" condition=Exp ")" SEMICOLON | {ForStatement} FOR "(" a=(Exp | Declaration) SEMICOLON b=Exp? SEMICOLON c=Exp?
	//	")" do=Statement | // TODO fix switch statement
	//	{SwitchStatement} SWITCH "(" a=Exp ")" LEFT_BRACE cases+=SwitchCase RIGHT_BRACE;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SwitchCase:
	//	CASE (case=INTCONSTANT | case=UINTCONSTANT | fcase=FLOATCONSTANT) COLON then=Statement | DEFAULT COLON then=Statement;
	public SwitchCaseElements getSwitchCaseAccess() {
		return (pSwitchCase != null) ? pSwitchCase : (pSwitchCase = new SwitchCaseElements());
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//BlockStatement:
	//	LEFT_BRACE statements+=Statement* RIGHT_BRACE;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//JumpStatement:
	//	CONTINUE SEMICOLON | BREAK SEMICOLON | {Return} RETURN SEMICOLON | {Return} RETURN value=Exp SEMICOLON | DISCARD
	//	SEMICOLON;
	public JumpStatementElements getJumpStatementAccess() {
		return (pJumpStatement != null) ? pJumpStatement : (pJumpStatement = new JumpStatementElements());
	}
	
	public ParserRule getJumpStatementRule() {
		return getJumpStatementAccess().getRule();
	}

	//VariableDeclaration:
	//	type=Type name=IDENTIFIER ("=" init=Exp)? SEMICOLON;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//AssignmentStatement:
	//	variable=[Symbol|IDENTIFIER] "=" right=Exp SEMICOLON;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return (pAssignmentStatement != null) ? pAssignmentStatement : (pAssignmentStatement = new AssignmentStatementElements());
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//Exp:
	//	LogicExp ({InlineIfExp.condition=current} => QUESTION then=Exp COLON else=Exp)?;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//LogicExp returns Exp:
	//	AddExp ({LogicExp.left=current} op=LogicOp right=AddExp)?;
	public LogicExpElements getLogicExpAccess() {
		return (pLogicExp != null) ? pLogicExp : (pLogicExp = new LogicExpElements());
	}
	
	public ParserRule getLogicExpRule() {
		return getLogicExpAccess().getRule();
	}

	//enum LogicOp:
	//	NOT_EQUAL="!=" | EQUAL="==" | LESSER="<" | GREATER=">" | LESSER_EQUAL="<=" | GREATER_EQUAL=">=";
	public LogicOpElements getLogicOpAccess() {
		return (unknownRuleLogicOp != null) ? unknownRuleLogicOp : (unknownRuleLogicOp = new LogicOpElements());
	}
	
	public EnumRule getLogicOpRule() {
		return getLogicOpAccess().getRule();
	}

	//AddExp returns Exp:
	//	MulExp ({AddExp.left=current} op=AddOp right=MulExp)*;
	public AddExpElements getAddExpAccess() {
		return (pAddExp != null) ? pAddExp : (pAddExp = new AddExpElements());
	}
	
	public ParserRule getAddExpRule() {
		return getAddExpAccess().getRule();
	}

	//AddOp:
	//	PLUS | DASH;
	public AddOpElements getAddOpAccess() {
		return (pAddOp != null) ? pAddOp : (pAddOp = new AddOpElements());
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}

	//MulExp returns Exp:
	//	PostfixExp ({MulExp.left=current} op=MulOp right=PostfixExp)*;
	public MulExpElements getMulExpAccess() {
		return (pMulExp != null) ? pMulExp : (pMulExp = new MulExpElements());
	}
	
	public ParserRule getMulExpRule() {
		return getMulExpAccess().getRule();
	}

	//MulOp:
	//	STAR | SLASH | PERCENT;
	public MulOpElements getMulOpAccess() {
		return (pMulOp != null) ? pMulOp : (pMulOp = new MulOpElements());
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}

	//PostfixExp returns Exp:
	//	{SymbolRef} symbol=[Symbol|IDENTIFIER] ({SymbolRefInvocation.symbolref=current} => "(" actuals+=Exp? (","
	//	actuals+=Exp)* ")" | {SymbolRefMember.symbolref=current} => "." member=("x" | "y" | "z" | "w"))? | Atomic;
	public PostfixExpElements getPostfixExpAccess() {
		return (pPostfixExp != null) ? pPostfixExp : (pPostfixExp = new PostfixExpElements());
	}
	
	public ParserRule getPostfixExpRule() {
		return getPostfixExpAccess().getRule();
	}

	//Atomic returns Exp:
	//	{Constructor} type=ComplexType "(" (params+=Exp ("," params+=Exp)*)? ")" | {IntegerLiteral} value=INTCONSTANT |
	//	{UIntegerLiteral} value=UINTCONSTANT | {FloatLiteral} value=FLOATCONSTANT | {BoolLiteral} value=BOOLCONSTANT | "(" Exp
	//	")";
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//AbstractDefinition:
	//	Definition | DeclaredParameter;
	public AbstractDefinitionElements getAbstractDefinitionAccess() {
		return (pAbstractDefinition != null) ? pAbstractDefinition : (pAbstractDefinition = new AbstractDefinitionElements());
	}
	
	public ParserRule getAbstractDefinitionRule() {
		return getAbstractDefinitionAccess().getRule();
	}

	//Definition:
	//	name=IDENTIFIER ("(" args+=DeclaredParameter ("," args+=DeclaredParameter)* ")")?;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//DeclaredParameter:
	//	name=IDENTIFIER;
	public DeclaredParameterElements getDeclaredParameterAccess() {
		return (pDeclaredParameter != null) ? pDeclaredParameter : (pDeclaredParameter = new DeclaredParameterElements());
	}
	
	public ParserRule getDeclaredParameterRule() {
		return getDeclaredParameterAccess().getRule();
	}

	//Evaluation:
	//	expression=Exp SEMICOLON;
	public EvaluationElements getEvaluationAccess() {
		return (pEvaluation != null) ? pEvaluation : (pEvaluation = new EvaluationElements());
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}
}
